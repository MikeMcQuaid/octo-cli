// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import "github.com/octo-cli/octo-cli/internal"

type MarkdownCmd struct {
	Render    MarkdownRenderCmd    `cmd:"" help:"Render an arbitrary Markdown document"`
	RenderRaw MarkdownRenderRawCmd `cmd:"" help:"Render a Markdown document in raw mode"`
}

type MarkdownRenderCmd struct {
	internal.BaseCmd
	Text    string `required:"" name:"text" help:"The Markdown text to render in HTML. Markdown content must be 400 KB or less."`
	Mode    string "name:\"mode\" help:\"The rendering mode. Can be either:  \n\\* `markdown` to render a document in plain Markdown, just like README.md files are rendered.  \n\\* `gfm` to render a document in [GitHub Flavored Markdown](https://github.github.com/gfm/), which creates links for user mentions as well as references to SHA-1 hashes, issues, and pull requests.\""
	Context string "name:\"context\" help:\"The repository context to use when creating references in `gfm` mode. Omit this parameter when using `markdown` mode.\""
}

func (c *MarkdownRenderCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/markdown")
	c.UpdateBody("text", c.Text)
	c.UpdateBody("mode", c.Mode)
	c.UpdateBody("context", c.Context)
	return c.DoRequest("POST")
}

type MarkdownRenderRawCmd struct {
	internal.BaseCmd
	Data string `required:"" name:"data"`
}

func (c *MarkdownRenderRawCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/markdown/raw")
	c.UpdateBody("data", c.Data)
	return c.DoRequest("POST")
}
