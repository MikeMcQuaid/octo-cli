// Code generated by go-github-cli/generator; DO NOT EDIT

package services

type GitCmd struct {
	GetBlob    GitGetBlobCmd    `cmd:"" help:"Get a blob"`
	CreateBlob GitCreateBlobCmd `cmd:"" help:"Create a blob"`
	GetCommit  GitGetCommitCmd  `cmd:"" help:"Get a commit"`
	GetRef     GitGetRefCmd     `cmd:"" help:"Get a reference"`
	ListRefs   GitListRefsCmd   `cmd:"" help:"Get all references"`
	CreateRef  GitCreateRefCmd  `cmd:"" help:"Create a reference"`
	UpdateRef  GitUpdateRefCmd  `cmd:"" help:"Update a reference"`
	DeleteRef  GitDeleteRefCmd  `cmd:"" help:"Delete a reference"`
	GetTag     GitGetTagCmd     `cmd:"" help:"Get a tag"`
	GetTree    GitGetTreeCmd    `cmd:"" help:"Get a tree"`
}

type GitGetBlobCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	FileSha string `required:"" name:"file_sha"`
}

func (c *GitGetBlobCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/git/blobs/:file_sha"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("file_sha", c.FileSha)
	return c.doRequest("GET")
}

type GitCreateBlobCmd struct {
	baseCmd
	Owner    string `required:"" name:"owner"`
	Repo     string `required:"" name:"repo"`
	Content  string `required:"" name:"content" help:"The new blob's content."`
	Encoding string "name:\"encoding\" help:\"The encoding used for `content`. Currently, `'utf-8'` and `'base64'` are supported.\""
}

func (c *GitCreateBlobCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/git/blobs"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateBody("content", c.Content)
	c.updateBody("encoding", c.Encoding)
	return c.doRequest("POST")
}

type GitGetCommitCmd struct {
	baseCmd
	Owner     string `required:"" name:"owner"`
	Repo      string `required:"" name:"repo"`
	CommitSha string `required:"" name:"commit_sha"`
}

func (c *GitGetCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/git/commits/:commit_sha"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("commit_sha", c.CommitSha)
	return c.doRequest("GET")
}

type GitGetRefCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
	Ref   string "required:\"\" name:\"ref\" help:\"Must be formatted as `heads/branch`, not just `branch`\""
}

func (c *GitGetRefCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/git/refs/:ref"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("ref", c.Ref)
	return c.doRequest("GET")
}

type GitListRefsCmd struct {
	baseCmd
	Owner     string `required:"" name:"owner"`
	Repo      string `required:"" name:"repo"`
	Namespace string "name:\"namespace\" help:\"Filter by sub-namespace (reference prefix). Most commen examples would be `'heads/'` and `'tags/'` to retrieve branches or tags\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GitListRefsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/git/refs/:namespace"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("namespace", c.Namespace)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type GitCreateRefCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
	Ref   string "required:\"\" name:\"ref\" help:\"The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.\""
	Sha   string `required:"" name:"sha" help:"The SHA1 value for this reference."`
}

func (c *GitCreateRefCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/git/refs"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateBody("ref", c.Ref)
	c.updateBody("sha", c.Sha)
	return c.doRequest("POST")
}

type GitUpdateRefCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
	Ref   string `required:"" name:"ref"`
	Sha   string `required:"" name:"sha" help:"The SHA1 value to set this reference to"`
	Force bool   "name:\"force\" help:\"Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.\""
}

func (c *GitUpdateRefCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/git/refs/:ref"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("ref", c.Ref)
	c.updateBody("sha", c.Sha)
	c.updateBody("force", c.Force)
	return c.doRequest("PATCH")
}

type GitDeleteRefCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
	Ref   string `required:"" name:"ref"`
}

func (c *GitDeleteRefCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/git/refs/:ref"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("ref", c.Ref)
	return c.doRequest("DELETE")
}

type GitGetTagCmd struct {
	baseCmd
	Owner  string `required:"" name:"owner"`
	Repo   string `required:"" name:"repo"`
	TagSha string `required:"" name:"tag_sha"`
}

func (c *GitGetTagCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/git/tags/:tag_sha"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("tag_sha", c.TagSha)
	return c.doRequest("GET")
}

type GitGetTreeCmd struct {
	baseCmd
	Owner     string `required:"" name:"owner"`
	Repo      string `required:"" name:"repo"`
	TreeSha   string `required:"" name:"tree_sha"`
	Recursive int64  `name:"recursive"`
}

func (c *GitGetTreeCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/git/trees/:tree_sha"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("tree_sha", c.TreeSha)
	c.updateURLQuery("recursive", c.Recursive)
	return c.doRequest("GET")
}
