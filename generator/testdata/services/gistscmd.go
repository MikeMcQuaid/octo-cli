// Code generated by go-github-cli/generator; DO NOT EDIT

package services

type GistsCmd struct {
	ListPublicForUser GistsListPublicForUserCmd `cmd:"" help:"List public gists for the specified user"`
	List              GistsListCmd              `cmd:"" help:"List the authenticated user's gists or if called anonymously, this will return all public gists"`
	ListPublic        GistsListPublicCmd        `cmd:"" help:"List all public gists"`
	ListStarred       GistsListStarredCmd       `cmd:"" help:"List starred gists"`
	Get               GistsGetCmd               `cmd:"" help:"Get a single gist"`
	GetRevision       GistsGetRevisionCmd       `cmd:"" help:"Get a specific revision of a gist"`
	ListCommits       GistsListCommitsCmd       `cmd:"" help:"List gist commits"`
	Star              GistsStarCmd              `cmd:"" help:"Star a gist"`
	Unstar            GistsUnstarCmd            `cmd:"" help:"Unstar a gist"`
	CheckIsStarred    GistsCheckIsStarredCmd    `cmd:"" help:"Check if a gist is starred"`
	Fork              GistsForkCmd              `cmd:"" help:"Fork a gist"`
	ListForks         GistsListForksCmd         `cmd:"" help:"List gist forks"`
	Delete            GistsDeleteCmd            `cmd:"" help:"Delete a gist"`
	ListComments      GistsListCommentsCmd      `cmd:"" help:"List comments on a gist"`
	GetComment        GistsGetCommentCmd        `cmd:"" help:"Get a single comment"`
	CreateComment     GistsCreateCommentCmd     `cmd:"" help:"Create a comment"`
	EditComment       GistsEditCommentCmd       `cmd:"" help:"Edit a comment"`
	DeleteComment     GistsDeleteCommentCmd     `cmd:"" help:"Delete a comment"`
}

type GistsListPublicForUserCmd struct {
	baseCmd
	Username string `required:"" name:"username"`
	Since    string "name:\"since\" help:\"A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.\""
	PerPage  int64  `name:"per_page" help:"Results per page (max 100)"`
	Page     int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListPublicForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/users/:username/gists"
	c.updateURLPath("username", c.Username)
	c.updateURLQuery("since", c.Since)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type GistsListCmd struct {
	baseCmd
	Since   string "name:\"since\" help:\"A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.\""
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists"
	c.updateURLQuery("since", c.Since)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type GistsListPublicCmd struct {
	baseCmd
	Since   string "name:\"since\" help:\"A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.\""
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListPublicCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/public"
	c.updateURLQuery("since", c.Since)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type GistsListStarredCmd struct {
	baseCmd
	Since   string "name:\"since\" help:\"A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.\""
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListStarredCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/starred"
	c.updateURLQuery("since", c.Since)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type GistsGetCmd struct {
	baseCmd
	GistId string `required:"" name:"gist_id"`
}

func (c *GistsGetCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id"
	c.updateURLPath("gist_id", c.GistId)
	return c.doRequest("GET")
}

type GistsGetRevisionCmd struct {
	baseCmd
	GistId string `required:"" name:"gist_id"`
	Sha    string `required:"" name:"sha"`
}

func (c *GistsGetRevisionCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id/:sha"
	c.updateURLPath("gist_id", c.GistId)
	c.updateURLPath("sha", c.Sha)
	return c.doRequest("GET")
}

type GistsListCommitsCmd struct {
	baseCmd
	GistId  string `required:"" name:"gist_id"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListCommitsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id/commits"
	c.updateURLPath("gist_id", c.GistId)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type GistsStarCmd struct {
	baseCmd
	GistId string `required:"" name:"gist_id"`
}

func (c *GistsStarCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id/star"
	c.updateURLPath("gist_id", c.GistId)
	return c.doRequest("PUT")
}

type GistsUnstarCmd struct {
	baseCmd
	GistId string `required:"" name:"gist_id"`
}

func (c *GistsUnstarCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id/star"
	c.updateURLPath("gist_id", c.GistId)
	return c.doRequest("DELETE")
}

type GistsCheckIsStarredCmd struct {
	baseCmd
	GistId string `required:"" name:"gist_id"`
}

func (c *GistsCheckIsStarredCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id/star"
	c.updateURLPath("gist_id", c.GistId)
	return c.doRequest("GET")
}

type GistsForkCmd struct {
	baseCmd
	GistId string `required:"" name:"gist_id"`
}

func (c *GistsForkCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id/forks"
	c.updateURLPath("gist_id", c.GistId)
	return c.doRequest("POST")
}

type GistsListForksCmd struct {
	baseCmd
	GistId  string `required:"" name:"gist_id"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListForksCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id/forks"
	c.updateURLPath("gist_id", c.GistId)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type GistsDeleteCmd struct {
	baseCmd
	GistId string `required:"" name:"gist_id"`
}

func (c *GistsDeleteCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id"
	c.updateURLPath("gist_id", c.GistId)
	return c.doRequest("DELETE")
}

type GistsListCommentsCmd struct {
	baseCmd
	GistId  string `required:"" name:"gist_id"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListCommentsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id/comments"
	c.updateURLPath("gist_id", c.GistId)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type GistsGetCommentCmd struct {
	baseCmd
	GistId    string `required:"" name:"gist_id"`
	CommentId int64  `required:"" name:"comment_id"`
}

func (c *GistsGetCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id/comments/:comment_id"
	c.updateURLPath("gist_id", c.GistId)
	c.updateURLPath("comment_id", c.CommentId)
	return c.doRequest("GET")
}

type GistsCreateCommentCmd struct {
	baseCmd
	GistId string `required:"" name:"gist_id"`
	Body   string `required:"" name:"body" help:"The comment text."`
}

func (c *GistsCreateCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id/comments"
	c.updateURLPath("gist_id", c.GistId)
	c.updateBody("body", c.Body)
	return c.doRequest("POST")
}

type GistsEditCommentCmd struct {
	baseCmd
	GistId    string `required:"" name:"gist_id"`
	CommentId int64  `required:"" name:"comment_id"`
	Body      string `required:"" name:"body" help:"The comment text."`
}

func (c *GistsEditCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id/comments/:comment_id"
	c.updateURLPath("gist_id", c.GistId)
	c.updateURLPath("comment_id", c.CommentId)
	c.updateBody("body", c.Body)
	return c.doRequest("PATCH")
}

type GistsDeleteCommentCmd struct {
	baseCmd
	GistId    string `required:"" name:"gist_id"`
	CommentId int64  `required:"" name:"comment_id"`
}

func (c *GistsDeleteCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/gists/:gist_id/comments/:comment_id"
	c.updateURLPath("gist_id", c.GistId)
	c.updateURLPath("comment_id", c.CommentId)
	return c.doRequest("DELETE")
}
