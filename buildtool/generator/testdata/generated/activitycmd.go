// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import "github.com/octo-cli/octo-cli/internal"

type ActivityCmd struct {
	CheckRepoIsStarredByAuthenticatedUser     ActivityCheckRepoIsStarredByAuthenticatedUserCmd     `cmd:""`
	CheckWatchingRepoLegacy                   ActivityCheckWatchingRepoLegacyCmd                   `cmd:""`
	DeleteRepoSubscription                    ActivityDeleteRepoSubscriptionCmd                    `cmd:""`
	DeleteThreadSubscription                  ActivityDeleteThreadSubscriptionCmd                  `cmd:""`
	GetFeeds                                  ActivityGetFeedsCmd                                  `cmd:""`
	GetRepoSubscription                       ActivityGetRepoSubscriptionCmd                       `cmd:""`
	GetThread                                 ActivityGetThreadCmd                                 `cmd:""`
	GetThreadSubscriptionForAuthenticatedUser ActivityGetThreadSubscriptionForAuthenticatedUserCmd `cmd:""`
	ListEventsForAuthenticatedUser            ActivityListEventsForAuthenticatedUserCmd            `cmd:""`
	ListNotificationsForAuthenticatedUser     ActivityListNotificationsForAuthenticatedUserCmd     `cmd:""`
	ListOrgEventsForAuthenticatedUser         ActivityListOrgEventsForAuthenticatedUserCmd         `cmd:""`
	ListPublicEvents                          ActivityListPublicEventsCmd                          `cmd:""`
	ListPublicEventsForRepoNetwork            ActivityListPublicEventsForRepoNetworkCmd            `cmd:""`
	ListPublicEventsForUser                   ActivityListPublicEventsForUserCmd                   `cmd:""`
	ListPublicOrgEvents                       ActivityListPublicOrgEventsCmd                       `cmd:""`
	ListReceivedEventsForUser                 ActivityListReceivedEventsForUserCmd                 `cmd:""`
	ListReceivedPublicEventsForUser           ActivityListReceivedPublicEventsForUserCmd           `cmd:""`
	ListRepoEvents                            ActivityListRepoEventsCmd                            `cmd:""`
	ListRepoNotificationsForAuthenticatedUser ActivityListRepoNotificationsForAuthenticatedUserCmd `cmd:""`
	ListReposStarredByAuthenticatedUser       ActivityListReposStarredByAuthenticatedUserCmd       `cmd:""`
	ListReposStarredByUser                    ActivityListReposStarredByUserCmd                    `cmd:""`
	ListReposWatchedByUser                    ActivityListReposWatchedByUserCmd                    `cmd:""`
	ListStargazersForRepo                     ActivityListStargazersForRepoCmd                     `cmd:""`
	ListWatchedReposForAuthenticatedUser      ActivityListWatchedReposForAuthenticatedUserCmd      `cmd:""`
	ListWatchersForRepo                       ActivityListWatchersForRepoCmd                       `cmd:""`
	MarkNotificationsAsRead                   ActivityMarkNotificationsAsReadCmd                   `cmd:""`
	MarkRepoNotificationsAsRead               ActivityMarkRepoNotificationsAsReadCmd               `cmd:""`
	MarkThreadAsRead                          ActivityMarkThreadAsReadCmd                          `cmd:""`
	SetRepoSubscription                       ActivitySetRepoSubscriptionCmd                       `cmd:""`
	SetThreadSubscription                     ActivitySetThreadSubscriptionCmd                     `cmd:""`
	StarRepoForAuthenticatedUser              ActivityStarRepoForAuthenticatedUserCmd              `cmd:""`
	StopWatchingRepoLegacy                    ActivityStopWatchingRepoLegacyCmd                    `cmd:""`
	UnstarRepoForAuthenticatedUser            ActivityUnstarRepoForAuthenticatedUserCmd            `cmd:""`
	WatchRepoLegacy                           ActivityWatchRepoLegacyCmd                           `cmd:""`
}

type ActivityCheckRepoIsStarredByAuthenticatedUserCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityCheckRepoIsStarredByAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/starred/:owner/:repo")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActivityCheckWatchingRepoLegacyCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityCheckWatchingRepoLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/subscriptions/:owner/:repo")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActivityDeleteRepoSubscriptionCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityDeleteRepoSubscriptionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/subscription")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ActivityDeleteThreadSubscriptionCmd struct {
	internal.BaseCmd
	ThreadId int64 `required:"" name:"thread_id"`
}

func (c *ActivityDeleteThreadSubscriptionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/notifications/threads/:thread_id/subscription")
	c.UpdateURLPath("thread_id", c.ThreadId)
	return c.DoRequest("DELETE")
}

type ActivityGetFeedsCmd struct {
	internal.BaseCmd
}

func (c *ActivityGetFeedsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/feeds")
	return c.DoRequest("GET")
}

type ActivityGetRepoSubscriptionCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityGetRepoSubscriptionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/subscription")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActivityGetThreadCmd struct {
	internal.BaseCmd
	ThreadId int64 `required:"" name:"thread_id"`
}

func (c *ActivityGetThreadCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/notifications/threads/:thread_id")
	c.UpdateURLPath("thread_id", c.ThreadId)
	return c.DoRequest("GET")
}

type ActivityGetThreadSubscriptionForAuthenticatedUserCmd struct {
	internal.BaseCmd
	ThreadId int64 `required:"" name:"thread_id"`
}

func (c *ActivityGetThreadSubscriptionForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/notifications/threads/:thread_id/subscription")
	c.UpdateURLPath("thread_id", c.ThreadId)
	return c.DoRequest("GET")
}

type ActivityListEventsForAuthenticatedUserCmd struct {
	internal.BaseCmd
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	Username string `required:"" name:"username"`
}

func (c *ActivityListEventsForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/:username/events")
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ActivityListNotificationsForAuthenticatedUserCmd struct {
	internal.BaseCmd
	All           bool   `name:"all"`
	Before        string `name:"before"`
	Page          int64  `name:"page"`
	Participating bool   `name:"participating"`
	PerPage       int64  `name:"per_page"`
	Since         string `name:"since"`
}

func (c *ActivityListNotificationsForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/notifications")
	c.UpdateURLQuery("all", c.All)
	c.UpdateURLQuery("before", c.Before)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("participating", c.Participating)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("since", c.Since)
	return c.DoRequest("GET")
}

type ActivityListOrgEventsForAuthenticatedUserCmd struct {
	internal.BaseCmd
	Org      string `required:"" name:"org"`
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	Username string `required:"" name:"username"`
}

func (c *ActivityListOrgEventsForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/:username/events/orgs/:org")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ActivityListPublicEventsCmd struct {
	internal.BaseCmd
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
}

func (c *ActivityListPublicEventsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/events")
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	return c.DoRequest("GET")
}

type ActivityListPublicEventsForRepoNetworkCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ActivityListPublicEventsForRepoNetworkCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/networks/:owner/:repo/events")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActivityListPublicEventsForUserCmd struct {
	internal.BaseCmd
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	Username string `required:"" name:"username"`
}

func (c *ActivityListPublicEventsForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/:username/events/public")
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ActivityListPublicOrgEventsCmd struct {
	internal.BaseCmd
	Org     string `required:"" name:"org"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
}

func (c *ActivityListPublicOrgEventsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/:org/events")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	return c.DoRequest("GET")
}

type ActivityListReceivedEventsForUserCmd struct {
	internal.BaseCmd
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	Username string `required:"" name:"username"`
}

func (c *ActivityListReceivedEventsForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/:username/received_events")
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ActivityListReceivedPublicEventsForUserCmd struct {
	internal.BaseCmd
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	Username string `required:"" name:"username"`
}

func (c *ActivityListReceivedPublicEventsForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/:username/received_events/public")
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ActivityListRepoEventsCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ActivityListRepoEventsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/events")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActivityListRepoNotificationsForAuthenticatedUserCmd struct {
	internal.BaseCmd
	All           bool   `name:"all"`
	Before        string `name:"before"`
	Owner         string `name:"owner"`
	Page          int64  `name:"page"`
	Participating bool   `name:"participating"`
	PerPage       int64  `name:"per_page"`
	Repo          string `required:"" name:"repo"`
	Since         string `name:"since"`
}

func (c *ActivityListRepoNotificationsForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/notifications")
	c.UpdateURLQuery("all", c.All)
	c.UpdateURLQuery("before", c.Before)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("participating", c.Participating)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("since", c.Since)
	return c.DoRequest("GET")
}

type ActivityListReposStarredByAuthenticatedUserCmd struct {
	internal.BaseCmd
	Direction string `name:"direction"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Sort      string `name:"sort"`
}

func (c *ActivityListReposStarredByAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/starred")
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("sort", c.Sort)
	return c.DoRequest("GET")
}

type ActivityListReposStarredByUserCmd struct {
	internal.BaseCmd
	Direction string `name:"direction"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Sort      string `name:"sort"`
	Username  string `required:"" name:"username"`
}

func (c *ActivityListReposStarredByUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/:username/starred")
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ActivityListReposWatchedByUserCmd struct {
	internal.BaseCmd
	Page     int64  `name:"page"`
	PerPage  int64  `name:"per_page"`
	Username string `required:"" name:"username"`
}

func (c *ActivityListReposWatchedByUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/:username/subscriptions")
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ActivityListStargazersForRepoCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ActivityListStargazersForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/stargazers")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActivityListWatchedReposForAuthenticatedUserCmd struct {
	internal.BaseCmd
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
}

func (c *ActivityListWatchedReposForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/subscriptions")
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	return c.DoRequest("GET")
}

type ActivityListWatchersForRepoCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ActivityListWatchersForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/subscribers")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActivityMarkNotificationsAsReadCmd struct {
	internal.BaseCmd
	LastReadAt string `name:"last_read_at"`
}

func (c *ActivityMarkNotificationsAsReadCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/notifications")
	c.UpdateBody("last_read_at", c.LastReadAt)
	return c.DoRequest("PUT")
}

type ActivityMarkRepoNotificationsAsReadCmd struct {
	internal.BaseCmd
	LastReadAt string `name:"last_read_at"`
	Owner      string `name:"owner"`
	Repo       string `required:"" name:"repo"`
}

func (c *ActivityMarkRepoNotificationsAsReadCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/notifications")
	c.UpdateBody("last_read_at", c.LastReadAt)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PUT")
}

type ActivityMarkThreadAsReadCmd struct {
	internal.BaseCmd
	ThreadId int64 `required:"" name:"thread_id"`
}

func (c *ActivityMarkThreadAsReadCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/notifications/threads/:thread_id")
	c.UpdateURLPath("thread_id", c.ThreadId)
	return c.DoRequest("PATCH")
}

type ActivitySetRepoSubscriptionCmd struct {
	internal.BaseCmd
	Ignored    bool   `name:"ignored"`
	Owner      string `name:"owner"`
	Repo       string `required:"" name:"repo"`
	Subscribed bool   `name:"subscribed"`
}

func (c *ActivitySetRepoSubscriptionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/subscription")
	c.UpdateBody("ignored", c.Ignored)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("subscribed", c.Subscribed)
	return c.DoRequest("PUT")
}

type ActivitySetThreadSubscriptionCmd struct {
	internal.BaseCmd
	Ignored  bool  `name:"ignored"`
	ThreadId int64 `required:"" name:"thread_id"`
}

func (c *ActivitySetThreadSubscriptionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/notifications/threads/:thread_id/subscription")
	c.UpdateBody("ignored", c.Ignored)
	c.UpdateURLPath("thread_id", c.ThreadId)
	return c.DoRequest("PUT")
}

type ActivityStarRepoForAuthenticatedUserCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityStarRepoForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/starred/:owner/:repo")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PUT")
}

type ActivityStopWatchingRepoLegacyCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityStopWatchingRepoLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/subscriptions/:owner/:repo")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ActivityUnstarRepoForAuthenticatedUserCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityUnstarRepoForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/starred/:owner/:repo")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ActivityWatchRepoLegacyCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityWatchRepoLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/subscriptions/:owner/:repo")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PUT")
}
