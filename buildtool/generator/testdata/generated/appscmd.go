// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import "github.com/octo-cli/octo-cli/internal"

type AppsCmd struct {
	GetBySlug                                           AppsGetBySlugCmd                                           `cmd:"" help:"Get a single GitHub App - https://developer.github.com/v3/apps/#get-a-single-github-app"`
	GetAuthenticated                                    AppsGetAuthenticatedCmd                                    `cmd:"" help:"Get the authenticated GitHub App - https://developer.github.com/v3/apps/#get-the-authenticated-github-app"`
	ListInstallations                                   AppsListInstallationsCmd                                   `cmd:"" help:"Find installations - https://developer.github.com/v3/apps/#find-installations"`
	GetInstallation                                     AppsGetInstallationCmd                                     `cmd:"" help:"Get a single installation - https://developer.github.com/v3/apps/#get-a-single-installation"`
	ListInstallationsForAuthenticatedUser               AppsListInstallationsForAuthenticatedUserCmd               `cmd:"" help:"List installations for user - https://developer.github.com/v3/apps/#list-installations-for-user"`
	CreateInstallationToken                             AppsCreateInstallationTokenCmd                             `cmd:"" help:"Create a new installation token - https://developer.github.com/v3/apps/#create-a-new-installation-token"`
	FindOrgInstallation                                 AppsFindOrgInstallationCmd                                 `cmd:"" help:"Find organization installation - https://developer.github.com/v3/apps/#find-organization-installation"`
	FindRepoInstallation                                AppsFindRepoInstallationCmd                                `cmd:"" help:"Find repository installation - https://developer.github.com/v3/apps/#find-repository-installation"`
	FindUserInstallation                                AppsFindUserInstallationCmd                                `cmd:"" help:"Find user installation - https://developer.github.com/v3/apps/#find-user-installation"`
	CreateFromManifest                                  AppsCreateFromManifestCmd                                  `cmd:"" help:"Create a GitHub App from a manifest - https://developer.github.com/v3/apps/#create-a-github-app-from-a-manifest"`
	ListRepos                                           AppsListReposCmd                                           `cmd:"" help:"List repositories - https://developer.github.com/v3/apps/installations/#list-repositories"`
	ListInstallationReposForAuthenticatedUser           AppsListInstallationReposForAuthenticatedUserCmd           `cmd:"" help:"List repositories accessible to the user for an installation - https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-user-for-an-installation"`
	AddRepoToInstallation                               AppsAddRepoToInstallationCmd                               `cmd:"" help:"Add repository to installation - https://developer.github.com/v3/apps/installations/#add-repository-to-installation"`
	RemoveRepoFromInstallation                          AppsRemoveRepoFromInstallationCmd                          `cmd:"" help:"Remove repository from installation - https://developer.github.com/v3/apps/installations/#remove-repository-from-installation"`
	ListPlans                                           AppsListPlansCmd                                           `cmd:"" help:"List all plans for your Marketplace listing - https://developer.github.com/v3/apps/marketplace/#list-all-plans-for-your-marketplace-listing"`
	ListPlansStubbed                                    AppsListPlansStubbedCmd                                    `cmd:"" help:"List all plans for your Marketplace listing (stubbed) - https://developer.github.com/v3/apps/marketplace/#list-all-plans-for-your-marketplace-listing"`
	ListAccountsUserOrOrgOnPlan                         AppsListAccountsUserOrOrgOnPlanCmd                         `cmd:"" help:"List all GitHub accounts (user or organization) on a specific plan - https://developer.github.com/v3/apps/marketplace/#list-all-github-accounts-user-or-organization-on-a-specific-plan"`
	ListAccountsUserOrOrgOnPlanStubbed                  AppsListAccountsUserOrOrgOnPlanStubbedCmd                  `cmd:"" help:"List all GitHub accounts (user or organization) on a specific plan (stubbed) - https://developer.github.com/v3/apps/marketplace/#list-all-github-accounts-user-or-organization-on-a-specific-plan"`
	CheckAccountIsAssociatedWithAny                     AppsCheckAccountIsAssociatedWithAnyCmd                     `cmd:"" help:"Check if a GitHub account is associated with any Marketplace listing - https://developer.github.com/v3/apps/marketplace/#check-if-a-github-account-is-associated-with-any-marketplace-listing"`
	CheckAccountIsAssociatedWithAnyStubbed              AppsCheckAccountIsAssociatedWithAnyStubbedCmd              `cmd:"" help:"Check if a GitHub account is associated with any Marketplace listing (stubbed) - https://developer.github.com/v3/apps/marketplace/#check-if-a-github-account-is-associated-with-any-marketplace-listing"`
	ListMarketplacePurchasesForAuthenticatedUser        AppsListMarketplacePurchasesForAuthenticatedUserCmd        `cmd:"" help:"Get a user's Marketplace purchases - https://developer.github.com/v3/apps/marketplace/#get-a-users-marketplace-purchases"`
	ListMarketplacePurchasesForAuthenticatedUserStubbed AppsListMarketplacePurchasesForAuthenticatedUserStubbedCmd `cmd:"" help:"Get a user's Marketplace purchases (stubbed) - https://developer.github.com/v3/apps/marketplace/#get-a-users-marketplace-purchases"`
}

type AppsGetBySlugCmd struct {
	internal.BaseCmd
	AppSlug string `required:"" name:"app_slug"`
}

func (c *AppsGetBySlugCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/apps/:app_slug")
	c.UpdateURLPath("app_slug", c.AppSlug)
	return c.DoRequest("GET")
}

type AppsGetAuthenticatedCmd struct {
	internal.BaseCmd
	MachineMan bool "name:\"machine-man-preview\" required:\"\" help:\"**Note:** To access the API with your GitHub App, you must provide a custom [media type](/v3/media) in the `Accept` Header for your requests.\n\n`application/vnd.github.machine-man-preview+json`\""
}

func (c *AppsGetAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/app")
	c.UpdatePreview("machine-man", c.MachineMan)
	return c.DoRequest("GET")
}

type AppsListInstallationsCmd struct {
	internal.BaseCmd
	MachineMan bool  "name:\"machine-man-preview\" required:\"\" help:\"**Note:** To access the API with your GitHub App, you must provide a custom [media type](/v3/media) in the `Accept` Header for your requests.\n\n`application/vnd.github.machine-man-preview+json`\""
	PerPage    int64 `name:"per_page" help:"Results per page (max 100)"`
	Page       int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListInstallationsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/app/installations")
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type AppsGetInstallationCmd struct {
	internal.BaseCmd
	MachineMan     bool  "name:\"machine-man-preview\" required:\"\" help:\"**Note:** To access the API with your GitHub App, you must provide a custom [media type](/v3/media) in the `Accept` Header for your requests.\n\n`application/vnd.github.machine-man-preview+json`\""
	InstallationId int64 `required:"" name:"installation_id"`
}

func (c *AppsGetInstallationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/app/installations/:installation_id")
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdateURLPath("installation_id", c.InstallationId)
	return c.DoRequest("GET")
}

type AppsListInstallationsForAuthenticatedUserCmd struct {
	internal.BaseCmd
	MachineMan bool  "name:\"machine-man-preview\" required:\"\" help:\"**Note:** To access the API with your GitHub App, you must provide a custom [media type](/v3/media) in the `Accept` Header for your requests.\n\n`application/vnd.github.machine-man-preview+json`\""
	PerPage    int64 `name:"per_page" help:"Results per page (max 100)"`
	Page       int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListInstallationsForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/installations")
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type AppsCreateInstallationTokenCmd struct {
	internal.BaseCmd
	MachineMan     bool  "name:\"machine-man-preview\" required:\"\" help:\"**Note:** To access the API with your GitHub App, you must provide a custom [media type](/v3/media) in the `Accept` Header for your requests.\n\n`application/vnd.github.machine-man-preview+json`\""
	InstallationId int64 `required:"" name:"installation_id"`
}

func (c *AppsCreateInstallationTokenCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/app/installations/:installation_id/access_tokens")
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdateURLPath("installation_id", c.InstallationId)
	return c.DoRequest("POST")
}

type AppsFindOrgInstallationCmd struct {
	internal.BaseCmd
	MachineMan bool   "name:\"machine-man-preview\" required:\"\" help:\"**Note:** To access the API with your GitHub App, you must provide a custom [media type](/v3/media) in the `Accept` Header for your requests.\n\n`application/vnd.github.machine-man-preview+json`\""
	Org        string `required:"" name:"org"`
}

func (c *AppsFindOrgInstallationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/:org/installation")
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdateURLPath("org", c.Org)
	return c.DoRequest("GET")
}

type AppsFindRepoInstallationCmd struct {
	internal.BaseCmd
	MachineMan bool   "name:\"machine-man-preview\" required:\"\" help:\"**Note:** To access the API with your GitHub App, you must provide a custom [media type](/v3/media) in the `Accept` Header for your requests.\n\n`application/vnd.github.machine-man-preview+json`\""
	Owner      string `name:"owner"`
	Repo       string `required:"" name:"repo"`
}

func (c *AppsFindRepoInstallationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/installation")
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type AppsFindUserInstallationCmd struct {
	internal.BaseCmd
	MachineMan bool   "name:\"machine-man-preview\" required:\"\" help:\"**Note:** To access the API with your GitHub App, you must provide a custom [media type](/v3/media) in the `Accept` Header for your requests.\n\n`application/vnd.github.machine-man-preview+json`\""
	Username   string `required:"" name:"username"`
}

func (c *AppsFindUserInstallationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/:username/installation")
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type AppsCreateFromManifestCmd struct {
	internal.BaseCmd
	Fury bool   "name:\"fury-preview\" required:\"\" help:\"**Note:** GitHub App Manifests are currently available for developers to preview. To access this API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.fury-preview+json\n\n```\""
	Code string `required:"" name:"code"`
}

func (c *AppsCreateFromManifestCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/app-manifests/:code/conversions")
	c.UpdatePreview("fury", c.Fury)
	c.UpdateURLPath("code", c.Code)
	return c.DoRequest("POST")
}

type AppsListReposCmd struct {
	internal.BaseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListReposCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/installation/repositories")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type AppsListInstallationReposForAuthenticatedUserCmd struct {
	internal.BaseCmd
	MachineMan     bool  "name:\"machine-man-preview\" required:\"\" help:\"**Note:** To access the API with your GitHub App, you must provide a custom [media type](/v3/media) in the `Accept` Header for your requests.\n\n`application/vnd.github.machine-man-preview+json`\""
	Mercy          bool  "name:\"mercy-preview\" help:\"**Note:** The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.mercy-preview+json\n\n```\""
	InstallationId int64 `required:"" name:"installation_id"`
	PerPage        int64 `name:"per_page" help:"Results per page (max 100)"`
	Page           int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListInstallationReposForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/installations/:installation_id/repositories")
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdatePreview("mercy", c.Mercy)
	c.UpdateURLPath("installation_id", c.InstallationId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type AppsAddRepoToInstallationCmd struct {
	internal.BaseCmd
	MachineMan     bool  "name:\"machine-man-preview\" required:\"\" help:\"**Note:** To access the API with your GitHub App, you must provide a custom [media type](/v3/media) in the `Accept` Header for your requests.\n\n`application/vnd.github.machine-man-preview+json`\""
	InstallationId int64 `required:"" name:"installation_id"`
	RepositoryId   int64 `required:"" name:"repository_id"`
}

func (c *AppsAddRepoToInstallationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/installations/:installation_id/repositories/:repository_id")
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdateURLPath("installation_id", c.InstallationId)
	c.UpdateURLPath("repository_id", c.RepositoryId)
	return c.DoRequest("PUT")
}

type AppsRemoveRepoFromInstallationCmd struct {
	internal.BaseCmd
	MachineMan     bool  "name:\"machine-man-preview\" required:\"\" help:\"**Note:** To access the API with your GitHub App, you must provide a custom [media type](/v3/media) in the `Accept` Header for your requests.\n\n`application/vnd.github.machine-man-preview+json`\""
	InstallationId int64 `required:"" name:"installation_id"`
	RepositoryId   int64 `required:"" name:"repository_id"`
}

func (c *AppsRemoveRepoFromInstallationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/installations/:installation_id/repositories/:repository_id")
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdateURLPath("installation_id", c.InstallationId)
	c.UpdateURLPath("repository_id", c.RepositoryId)
	return c.DoRequest("DELETE")
}

type AppsListPlansCmd struct {
	internal.BaseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListPlansCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/marketplace_listing/plans")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type AppsListPlansStubbedCmd struct {
	internal.BaseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListPlansStubbedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/marketplace_listing/stubbed/plans")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type AppsListAccountsUserOrOrgOnPlanCmd struct {
	internal.BaseCmd
	PlanId    int64  `required:"" name:"plan_id"`
	Sort      string "name:\"sort\" help:\"Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.\""
	Direction string "name:\"direction\" help:\"To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListAccountsUserOrOrgOnPlanCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/marketplace_listing/plans/:plan_id/accounts")
	c.UpdateURLPath("plan_id", c.PlanId)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type AppsListAccountsUserOrOrgOnPlanStubbedCmd struct {
	internal.BaseCmd
	PlanId    int64  `required:"" name:"plan_id"`
	Sort      string "name:\"sort\" help:\"Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.\""
	Direction string "name:\"direction\" help:\"To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListAccountsUserOrOrgOnPlanStubbedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/marketplace_listing/stubbed/plans/:plan_id/accounts")
	c.UpdateURLPath("plan_id", c.PlanId)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type AppsCheckAccountIsAssociatedWithAnyCmd struct {
	internal.BaseCmd
	AccountId int64 `required:"" name:"account_id"`
	PerPage   int64 `name:"per_page" help:"Results per page (max 100)"`
	Page      int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsCheckAccountIsAssociatedWithAnyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/marketplace_listing/accounts/:account_id")
	c.UpdateURLPath("account_id", c.AccountId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type AppsCheckAccountIsAssociatedWithAnyStubbedCmd struct {
	internal.BaseCmd
	AccountId int64 `required:"" name:"account_id"`
	PerPage   int64 `name:"per_page" help:"Results per page (max 100)"`
	Page      int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsCheckAccountIsAssociatedWithAnyStubbedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/marketplace_listing/stubbed/accounts/:account_id")
	c.UpdateURLPath("account_id", c.AccountId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type AppsListMarketplacePurchasesForAuthenticatedUserCmd struct {
	internal.BaseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListMarketplacePurchasesForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/marketplace_purchases")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type AppsListMarketplacePurchasesForAuthenticatedUserStubbedCmd struct {
	internal.BaseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListMarketplacePurchasesForAuthenticatedUserStubbedCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/marketplace_purchases/stubbed")
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}
