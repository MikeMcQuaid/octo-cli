// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import "github.com/octo-cli/octo-cli/internal"

type ReposCmd struct {
	AcceptInvitation                                   ReposAcceptInvitationCmd                                   `cmd:""`
	AddCollaborator                                    ReposAddCollaboratorCmd                                    `cmd:""`
	AddDeployKey                                       ReposAddDeployKeyCmd                                       `cmd:""`
	AddProtectedBranchAdminEnforcement                 ReposAddProtectedBranchAdminEnforcementCmd                 `cmd:""`
	AddProtectedBranchAppRestrictions                  ReposAddProtectedBranchAppRestrictionsCmd                  `cmd:""`
	AddProtectedBranchRequiredSignatures               ReposAddProtectedBranchRequiredSignaturesCmd               `cmd:""`
	AddProtectedBranchRequiredStatusChecksContexts     ReposAddProtectedBranchRequiredStatusChecksContextsCmd     `cmd:""`
	AddProtectedBranchTeamRestrictions                 ReposAddProtectedBranchTeamRestrictionsCmd                 `cmd:""`
	AddProtectedBranchUserRestrictions                 ReposAddProtectedBranchUserRestrictionsCmd                 `cmd:""`
	CheckCollaborator                                  ReposCheckCollaboratorCmd                                  `cmd:""`
	CheckVulnerabilityAlerts                           ReposCheckVulnerabilityAlertsCmd                           `cmd:""`
	CompareCommits                                     ReposCompareCommitsCmd                                     `cmd:""`
	CreateCommitComment                                ReposCreateCommitCommentCmd                                `cmd:""`
	CreateDeployment                                   ReposCreateDeploymentCmd                                   `cmd:""`
	CreateDeploymentStatus                             ReposCreateDeploymentStatusCmd                             `cmd:""`
	CreateForAuthenticatedUser                         ReposCreateForAuthenticatedUserCmd                         `cmd:""`
	CreateFork                                         ReposCreateForkCmd                                         `cmd:""`
	CreateInOrg                                        ReposCreateInOrgCmd                                        `cmd:""`
	CreateRelease                                      ReposCreateReleaseCmd                                      `cmd:""`
	CreateStatus                                       ReposCreateStatusCmd                                       `cmd:""`
	CreateUsingTemplate                                ReposCreateUsingTemplateCmd                                `cmd:""`
	DeclineInvitation                                  ReposDeclineInvitationCmd                                  `cmd:""`
	Delete                                             ReposDeleteCmd                                             `cmd:""`
	DeleteCommitComment                                ReposDeleteCommitCommentCmd                                `cmd:""`
	DeleteDeployment                                   ReposDeleteDeploymentCmd                                   `cmd:""`
	DeleteDownload                                     ReposDeleteDownloadCmd                                     `cmd:""`
	DeleteHook                                         ReposDeleteHookCmd                                         `cmd:""`
	DeleteInvitation                                   ReposDeleteInvitationCmd                                   `cmd:""`
	DeleteRelease                                      ReposDeleteReleaseCmd                                      `cmd:""`
	DeleteReleaseAsset                                 ReposDeleteReleaseAssetCmd                                 `cmd:""`
	DisableAutomatedSecurityFixes                      ReposDisableAutomatedSecurityFixesCmd                      `cmd:""`
	DisablePagesSite                                   ReposDisablePagesSiteCmd                                   `cmd:""`
	DisableVulnerabilityAlerts                         ReposDisableVulnerabilityAlertsCmd                         `cmd:""`
	EnableAutomatedSecurityFixes                       ReposEnableAutomatedSecurityFixesCmd                       `cmd:""`
	EnableVulnerabilityAlerts                          ReposEnableVulnerabilityAlertsCmd                          `cmd:""`
	Get                                                ReposGetCmd                                                `cmd:""`
	GetAllTopics                                       ReposGetAllTopicsCmd                                       `cmd:""`
	GetAppsWithAccessToProtectedBranch                 ReposGetAppsWithAccessToProtectedBranchCmd                 `cmd:""`
	GetArchiveLink                                     ReposGetArchiveLinkCmd                                     `cmd:""`
	GetBranch                                          ReposGetBranchCmd                                          `cmd:""`
	GetBranchProtection                                ReposGetBranchProtectionCmd                                `cmd:""`
	GetClones                                          ReposGetClonesCmd                                          `cmd:""`
	GetCodeFrequencyStats                              ReposGetCodeFrequencyStatsCmd                              `cmd:""`
	GetCollaboratorPermissionLevel                     ReposGetCollaboratorPermissionLevelCmd                     `cmd:""`
	GetCombinedStatusForRef                            ReposGetCombinedStatusForRefCmd                            `cmd:""`
	GetCommit                                          ReposGetCommitCmd                                          `cmd:""`
	GetCommitActivityStats                             ReposGetCommitActivityStatsCmd                             `cmd:""`
	GetCommitComment                                   ReposGetCommitCommentCmd                                   `cmd:""`
	GetContents                                        ReposGetContentsCmd                                        `cmd:""`
	GetContributorsStats                               ReposGetContributorsStatsCmd                               `cmd:""`
	GetDeployKey                                       ReposGetDeployKeyCmd                                       `cmd:""`
	GetDeployment                                      ReposGetDeploymentCmd                                      `cmd:""`
	GetDeploymentStatus                                ReposGetDeploymentStatusCmd                                `cmd:""`
	GetDownload                                        ReposGetDownloadCmd                                        `cmd:""`
	GetHook                                            ReposGetHookCmd                                            `cmd:""`
	GetLatestPagesBuild                                ReposGetLatestPagesBuildCmd                                `cmd:""`
	GetLatestRelease                                   ReposGetLatestReleaseCmd                                   `cmd:""`
	GetPages                                           ReposGetPagesCmd                                           `cmd:""`
	GetPagesBuild                                      ReposGetPagesBuildCmd                                      `cmd:""`
	GetParticipationStats                              ReposGetParticipationStatsCmd                              `cmd:""`
	GetProtectedBranchAdminEnforcement                 ReposGetProtectedBranchAdminEnforcementCmd                 `cmd:""`
	GetProtectedBranchPullRequestReviewEnforcement     ReposGetProtectedBranchPullRequestReviewEnforcementCmd     `cmd:""`
	GetProtectedBranchRequiredSignatures               ReposGetProtectedBranchRequiredSignaturesCmd               `cmd:""`
	GetProtectedBranchRequiredStatusChecks             ReposGetProtectedBranchRequiredStatusChecksCmd             `cmd:""`
	GetProtectedBranchRestrictions                     ReposGetProtectedBranchRestrictionsCmd                     `cmd:""`
	GetPunchCardStats                                  ReposGetPunchCardStatsCmd                                  `cmd:""`
	GetReadme                                          ReposGetReadmeCmd                                          `cmd:""`
	GetRelease                                         ReposGetReleaseCmd                                         `cmd:""`
	GetReleaseAsset                                    ReposGetReleaseAssetCmd                                    `cmd:""`
	GetReleaseByTag                                    ReposGetReleaseByTagCmd                                    `cmd:""`
	GetTeamsWithAccessToProtectedBranch                ReposGetTeamsWithAccessToProtectedBranchCmd                `cmd:""`
	GetTopPaths                                        ReposGetTopPathsCmd                                        `cmd:""`
	GetTopReferrers                                    ReposGetTopReferrersCmd                                    `cmd:""`
	GetUsersWithAccessToProtectedBranch                ReposGetUsersWithAccessToProtectedBranchCmd                `cmd:""`
	GetViews                                           ReposGetViewsCmd                                           `cmd:""`
	ListAssetsForRelease                               ReposListAssetsForReleaseCmd                               `cmd:""`
	ListBranches                                       ReposListBranchesCmd                                       `cmd:""`
	ListBranchesForHeadCommit                          ReposListBranchesForHeadCommitCmd                          `cmd:""`
	ListCollaborators                                  ReposListCollaboratorsCmd                                  `cmd:""`
	ListCommentsForCommit                              ReposListCommentsForCommitCmd                              `cmd:""`
	ListCommitComments                                 ReposListCommitCommentsCmd                                 `cmd:""`
	ListCommits                                        ReposListCommitsCmd                                        `cmd:""`
	ListContributors                                   ReposListContributorsCmd                                   `cmd:""`
	ListDeployKeys                                     ReposListDeployKeysCmd                                     `cmd:""`
	ListDeploymentStatuses                             ReposListDeploymentStatusesCmd                             `cmd:""`
	ListDeployments                                    ReposListDeploymentsCmd                                    `cmd:""`
	ListDownloads                                      ReposListDownloadsCmd                                      `cmd:""`
	ListForAuthenticatedUser                           ReposListForAuthenticatedUserCmd                           `cmd:""`
	ListForOrg                                         ReposListForOrgCmd                                         `cmd:""`
	ListForUser                                        ReposListForUserCmd                                        `cmd:""`
	ListForks                                          ReposListForksCmd                                          `cmd:""`
	ListHooks                                          ReposListHooksCmd                                          `cmd:""`
	ListInvitations                                    ReposListInvitationsCmd                                    `cmd:""`
	ListInvitationsForAuthenticatedUser                ReposListInvitationsForAuthenticatedUserCmd                `cmd:""`
	ListLanguages                                      ReposListLanguagesCmd                                      `cmd:""`
	ListPagesBuilds                                    ReposListPagesBuildsCmd                                    `cmd:""`
	ListProtectedBranchRequiredStatusChecksContexts    ReposListProtectedBranchRequiredStatusChecksContextsCmd    `cmd:""`
	ListPublic                                         ReposListPublicCmd                                         `cmd:""`
	ListPullRequestsAssociatedWithCommit               ReposListPullRequestsAssociatedWithCommitCmd               `cmd:""`
	ListReleases                                       ReposListReleasesCmd                                       `cmd:""`
	ListStatusesForRef                                 ReposListStatusesForRefCmd                                 `cmd:""`
	ListTags                                           ReposListTagsCmd                                           `cmd:""`
	ListTeams                                          ReposListTeamsCmd                                          `cmd:""`
	Merge                                              ReposMergeCmd                                              `cmd:""`
	PingHook                                           ReposPingHookCmd                                           `cmd:""`
	RemoveBranchProtection                             ReposRemoveBranchProtectionCmd                             `cmd:""`
	RemoveCollaborator                                 ReposRemoveCollaboratorCmd                                 `cmd:""`
	RemoveDeployKey                                    ReposRemoveDeployKeyCmd                                    `cmd:""`
	RemoveProtectedBranchAdminEnforcement              ReposRemoveProtectedBranchAdminEnforcementCmd              `cmd:""`
	RemoveProtectedBranchAppRestrictions               ReposRemoveProtectedBranchAppRestrictionsCmd               `cmd:""`
	RemoveProtectedBranchPullRequestReviewEnforcement  ReposRemoveProtectedBranchPullRequestReviewEnforcementCmd  `cmd:""`
	RemoveProtectedBranchRequiredSignatures            ReposRemoveProtectedBranchRequiredSignaturesCmd            `cmd:""`
	RemoveProtectedBranchRequiredStatusChecks          ReposRemoveProtectedBranchRequiredStatusChecksCmd          `cmd:""`
	RemoveProtectedBranchRequiredStatusChecksContexts  ReposRemoveProtectedBranchRequiredStatusChecksContextsCmd  `cmd:""`
	RemoveProtectedBranchRestrictions                  ReposRemoveProtectedBranchRestrictionsCmd                  `cmd:""`
	RemoveProtectedBranchTeamRestrictions              ReposRemoveProtectedBranchTeamRestrictionsCmd              `cmd:""`
	RemoveProtectedBranchUserRestrictions              ReposRemoveProtectedBranchUserRestrictionsCmd              `cmd:""`
	ReplaceAllTopics                                   ReposReplaceAllTopicsCmd                                   `cmd:""`
	ReplaceProtectedBranchAppRestrictions              ReposReplaceProtectedBranchAppRestrictionsCmd              `cmd:""`
	ReplaceProtectedBranchRequiredStatusChecksContexts ReposReplaceProtectedBranchRequiredStatusChecksContextsCmd `cmd:""`
	ReplaceProtectedBranchTeamRestrictions             ReposReplaceProtectedBranchTeamRestrictionsCmd             `cmd:""`
	ReplaceProtectedBranchUserRestrictions             ReposReplaceProtectedBranchUserRestrictionsCmd             `cmd:""`
	RequestPageBuild                                   ReposRequestPageBuildCmd                                   `cmd:""`
	RetrieveCommunityProfileMetrics                    ReposRetrieveCommunityProfileMetricsCmd                    `cmd:""`
	TestPushHook                                       ReposTestPushHookCmd                                       `cmd:""`
	Transfer                                           ReposTransferCmd                                           `cmd:""`
	Update                                             ReposUpdateCmd                                             `cmd:""`
	UpdateCommitComment                                ReposUpdateCommitCommentCmd                                `cmd:""`
	UpdateInformationAboutPagesSite                    ReposUpdateInformationAboutPagesSiteCmd                    `cmd:""`
	UpdateInvitation                                   ReposUpdateInvitationCmd                                   `cmd:""`
	UpdateProtectedBranchRequiredStatusChecks          ReposUpdateProtectedBranchRequiredStatusChecksCmd          `cmd:""`
	UpdateRelease                                      ReposUpdateReleaseCmd                                      `cmd:""`
	UpdateReleaseAsset                                 ReposUpdateReleaseAssetCmd                                 `cmd:""`
	UploadReleaseAsset                                 ReposUploadReleaseAssetCmd                                 `cmd:""`
}

type ReposAcceptInvitationCmd struct {
	internal.BaseCmd
	InvitationId int64 `required:"" name:"invitation_id"`
}

func (c *ReposAcceptInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repository_invitations/:invitation_id")
	c.UpdateURLPath("invitation_id", c.InvitationId)
	return c.DoRequest("PATCH")
}

type ReposAddCollaboratorCmd struct {
	internal.BaseCmd
	Owner      string `name:"owner"`
	Permission string `name:"permission"`
	Repo       string `required:"" name:"repo"`
	Username   string `required:"" name:"username"`
}

func (c *ReposAddCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/collaborators/:username")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateBody("permission", c.Permission)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("PUT")
}

type ReposAddDeployKeyCmd struct {
	internal.BaseCmd
	Key      string `required:"" name:"key"`
	Owner    string `name:"owner"`
	ReadOnly bool   `name:"read_only"`
	Repo     string `required:"" name:"repo"`
	Title    string `name:"title"`
}

func (c *ReposAddDeployKeyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/keys")
	c.UpdateBody("key", c.Key)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateBody("read_only", c.ReadOnly)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("title", c.Title)
	return c.DoRequest("POST")
}

type ReposAddProtectedBranchAdminEnforcementCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposAddProtectedBranchAdminEnforcementCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/enforce_admins")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposAddProtectedBranchAppRestrictionsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposAddProtectedBranchAppRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions/apps")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposAddProtectedBranchRequiredSignaturesCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
	Zzzax  bool   "name:\"zzzax-preview\" required:\"\" help:\"Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.zzzax-preview+json\n```\""
}

func (c *ReposAddProtectedBranchRequiredSignaturesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/required_signatures")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("zzzax", c.Zzzax)
	return c.DoRequest("POST")
}

type ReposAddProtectedBranchRequiredStatusChecksContextsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposAddProtectedBranchRequiredStatusChecksContextsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposAddProtectedBranchTeamRestrictionsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposAddProtectedBranchTeamRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions/teams")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposAddProtectedBranchUserRestrictionsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposAddProtectedBranchUserRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions/users")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposCheckCollaboratorCmd struct {
	internal.BaseCmd
	Owner    string `name:"owner"`
	Repo     string `required:"" name:"repo"`
	Username string `required:"" name:"username"`
}

func (c *ReposCheckCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/collaborators/:username")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ReposCheckVulnerabilityAlertsCmd struct {
	internal.BaseCmd
	Dorian bool   "name:\"dorian-preview\" required:\"\" help:\"Enabling and disabling vulnerability alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.dorian-preview+json\n```\""
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposCheckVulnerabilityAlertsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/vulnerability-alerts")
	c.UpdatePreview("dorian", c.Dorian)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposCompareCommitsCmd struct {
	internal.BaseCmd
	Base  string `required:"" name:"base"`
	Head  string `required:"" name:"head"`
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposCompareCommitsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/compare/:base...:head")
	c.UpdateURLPath("base", c.Base)
	c.UpdateURLPath("head", c.Head)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposCreateCommitCommentCmd struct {
	internal.BaseCmd
	Body      string `required:"" name:"body"`
	CommitSha string `required:"" name:"commit_sha"`
	Line      int64  `name:"line"`
	Owner     string `name:"owner"`
	Path      string `name:"path"`
	Position  int64  `name:"position"`
	Repo      string `required:"" name:"repo"`
}

func (c *ReposCreateCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/commits/:commit_sha/comments")
	c.UpdateBody("body", c.Body)
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdateBody("line", c.Line)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateBody("path", c.Path)
	c.UpdateBody("position", c.Position)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposCreateDeploymentCmd struct {
	internal.BaseCmd
	AntMan                bool     "name:\"ant-man-preview\" help:\"The `transient_environment` and `production_environment` parameters are currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```\""
	AutoMerge             bool     `name:"auto_merge"`
	Description           string   `name:"description"`
	Environment           string   `name:"environment"`
	Owner                 string   `name:"owner"`
	Payload               string   `name:"payload"`
	ProductionEnvironment bool     `name:"production_environment"`
	Ref                   string   `required:"" name:"ref"`
	Repo                  string   `required:"" name:"repo"`
	RequiredContexts      []string `name:"required_contexts"`
	Task                  string   `name:"task"`
	TransientEnvironment  bool     `name:"transient_environment"`
}

func (c *ReposCreateDeploymentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/deployments")
	c.UpdatePreview("ant-man", c.AntMan)
	c.UpdateBody("auto_merge", c.AutoMerge)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("environment", c.Environment)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateBody("payload", c.Payload)
	c.UpdateBody("production_environment", c.ProductionEnvironment)
	c.UpdateBody("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("required_contexts", c.RequiredContexts)
	c.UpdateBody("task", c.Task)
	c.UpdateBody("transient_environment", c.TransientEnvironment)
	return c.DoRequest("POST")
}

type ReposCreateDeploymentStatusCmd struct {
	internal.BaseCmd
	AntMan         bool   "name:\"ant-man-preview\" help:\"The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```\""
	AutoInactive   bool   `name:"auto_inactive"`
	DeploymentId   int64  `required:"" name:"deployment_id"`
	Description    string `name:"description"`
	Environment    string `name:"environment"`
	EnvironmentUrl string `name:"environment_url"`
	Flash          bool   "name:\"flash-preview\" help:\"New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must provide the following custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.flash-preview+json\n```\""
	LogUrl         string `name:"log_url"`
	Owner          string `name:"owner"`
	Repo           string `required:"" name:"repo"`
	State          string `required:"" name:"state"`
	TargetUrl      string `name:"target_url"`
}

func (c *ReposCreateDeploymentStatusCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/deployments/:deployment_id/statuses")
	c.UpdatePreview("ant-man", c.AntMan)
	c.UpdateBody("auto_inactive", c.AutoInactive)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("environment", c.Environment)
	c.UpdateBody("environment_url", c.EnvironmentUrl)
	c.UpdatePreview("flash", c.Flash)
	c.UpdateBody("log_url", c.LogUrl)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("state", c.State)
	c.UpdateBody("target_url", c.TargetUrl)
	return c.DoRequest("POST")
}

type ReposCreateForAuthenticatedUserCmd struct {
	internal.BaseCmd
	AllowMergeCommit    bool   `name:"allow_merge_commit"`
	AllowRebaseMerge    bool   `name:"allow_rebase_merge"`
	AllowSquashMerge    bool   `name:"allow_squash_merge"`
	AutoInit            bool   `name:"auto_init"`
	Baptiste            bool   "name:\"baptiste-preview\" help:\"The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```\""
	DeleteBranchOnMerge bool   `name:"delete_branch_on_merge"`
	Description         string `name:"description"`
	GitignoreTemplate   string `name:"gitignore_template"`
	HasIssues           bool   `name:"has_issues"`
	HasProjects         bool   `name:"has_projects"`
	HasWiki             bool   `name:"has_wiki"`
	Homepage            string `name:"homepage"`
	IsTemplate          bool   `name:"is_template"`
	LicenseTemplate     string `name:"license_template"`
	Name                string `required:"" name:"name"`
	Nebula              bool   "name:\"nebula-preview\" help:\"You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```\""
	Private             bool   `name:"private"`
	TeamId              int64  `name:"team_id"`
	Visibility          string `name:"visibility"`
}

func (c *ReposCreateForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repos")
	c.UpdateBody("allow_merge_commit", c.AllowMergeCommit)
	c.UpdateBody("allow_rebase_merge", c.AllowRebaseMerge)
	c.UpdateBody("allow_squash_merge", c.AllowSquashMerge)
	c.UpdateBody("auto_init", c.AutoInit)
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateBody("delete_branch_on_merge", c.DeleteBranchOnMerge)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("gitignore_template", c.GitignoreTemplate)
	c.UpdateBody("has_issues", c.HasIssues)
	c.UpdateBody("has_projects", c.HasProjects)
	c.UpdateBody("has_wiki", c.HasWiki)
	c.UpdateBody("homepage", c.Homepage)
	c.UpdateBody("is_template", c.IsTemplate)
	c.UpdateBody("license_template", c.LicenseTemplate)
	c.UpdateBody("name", c.Name)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdateBody("private", c.Private)
	c.UpdateBody("team_id", c.TeamId)
	c.UpdateBody("visibility", c.Visibility)
	return c.DoRequest("POST")
}

type ReposCreateForkCmd struct {
	internal.BaseCmd
	Organization string `name:"organization"`
	Owner        string `name:"owner"`
	Repo         string `required:"" name:"repo"`
}

func (c *ReposCreateForkCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/forks")
	c.UpdateBody("organization", c.Organization)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposCreateInOrgCmd struct {
	internal.BaseCmd
	AllowMergeCommit    bool   `name:"allow_merge_commit"`
	AllowRebaseMerge    bool   `name:"allow_rebase_merge"`
	AllowSquashMerge    bool   `name:"allow_squash_merge"`
	AutoInit            bool   `name:"auto_init"`
	Baptiste            bool   "name:\"baptiste-preview\" help:\"The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```\""
	DeleteBranchOnMerge bool   `name:"delete_branch_on_merge"`
	Description         string `name:"description"`
	GitignoreTemplate   string `name:"gitignore_template"`
	HasIssues           bool   `name:"has_issues"`
	HasProjects         bool   `name:"has_projects"`
	HasWiki             bool   `name:"has_wiki"`
	Homepage            string `name:"homepage"`
	IsTemplate          bool   `name:"is_template"`
	LicenseTemplate     string `name:"license_template"`
	Name                string `required:"" name:"name"`
	Nebula              bool   "name:\"nebula-preview\" help:\"You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```\""
	Org                 string `required:"" name:"org"`
	Private             bool   `name:"private"`
	TeamId              int64  `name:"team_id"`
	Visibility          string `name:"visibility"`
}

func (c *ReposCreateInOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/:org/repos")
	c.UpdateBody("allow_merge_commit", c.AllowMergeCommit)
	c.UpdateBody("allow_rebase_merge", c.AllowRebaseMerge)
	c.UpdateBody("allow_squash_merge", c.AllowSquashMerge)
	c.UpdateBody("auto_init", c.AutoInit)
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateBody("delete_branch_on_merge", c.DeleteBranchOnMerge)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("gitignore_template", c.GitignoreTemplate)
	c.UpdateBody("has_issues", c.HasIssues)
	c.UpdateBody("has_projects", c.HasProjects)
	c.UpdateBody("has_wiki", c.HasWiki)
	c.UpdateBody("homepage", c.Homepage)
	c.UpdateBody("is_template", c.IsTemplate)
	c.UpdateBody("license_template", c.LicenseTemplate)
	c.UpdateBody("name", c.Name)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdateURLPath("org", c.Org)
	c.UpdateBody("private", c.Private)
	c.UpdateBody("team_id", c.TeamId)
	c.UpdateBody("visibility", c.Visibility)
	return c.DoRequest("POST")
}

type ReposCreateReleaseCmd struct {
	internal.BaseCmd
	Body            string `name:"body"`
	Draft           bool   `name:"draft"`
	Name            string `name:"name"`
	Owner           string `name:"owner"`
	Prerelease      bool   `name:"prerelease"`
	Repo            string `required:"" name:"repo"`
	TagName         string `required:"" name:"tag_name"`
	TargetCommitish string `name:"target_commitish"`
}

func (c *ReposCreateReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/releases")
	c.UpdateBody("body", c.Body)
	c.UpdateBody("draft", c.Draft)
	c.UpdateBody("name", c.Name)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateBody("prerelease", c.Prerelease)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("tag_name", c.TagName)
	c.UpdateBody("target_commitish", c.TargetCommitish)
	return c.DoRequest("POST")
}

type ReposCreateStatusCmd struct {
	internal.BaseCmd
	Context     string `name:"context"`
	Description string `name:"description"`
	Owner       string `name:"owner"`
	Repo        string `required:"" name:"repo"`
	Sha         string `required:"" name:"sha"`
	State       string `required:"" name:"state"`
	TargetUrl   string `name:"target_url"`
}

func (c *ReposCreateStatusCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/statuses/:sha")
	c.UpdateBody("context", c.Context)
	c.UpdateBody("description", c.Description)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("sha", c.Sha)
	c.UpdateBody("state", c.State)
	c.UpdateBody("target_url", c.TargetUrl)
	return c.DoRequest("POST")
}

type ReposCreateUsingTemplateCmd struct {
	internal.BaseCmd
	Baptiste      bool   "name:\"baptiste-preview\" required:\"\" help:\"Creating and using repository templates is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```\""
	Description   string `name:"description"`
	Name          string `required:"" name:"name"`
	Owner         string `name:"owner"`
	Private       bool   `name:"private"`
	TemplateOwner string `required:"" name:"template_owner"`
	TemplateRepo  string `required:"" name:"template_repo"`
}

func (c *ReposCreateUsingTemplateCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:template_owner/:template_repo/generate")
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("owner", c.Owner)
	c.UpdateBody("private", c.Private)
	c.UpdateURLPath("template_owner", c.TemplateOwner)
	c.UpdateURLPath("template_repo", c.TemplateRepo)
	return c.DoRequest("POST")
}

type ReposDeclineInvitationCmd struct {
	internal.BaseCmd
	InvitationId int64 `required:"" name:"invitation_id"`
}

func (c *ReposDeclineInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repository_invitations/:invitation_id")
	c.UpdateURLPath("invitation_id", c.InvitationId)
	return c.DoRequest("DELETE")
}

type ReposDeleteCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposDeleteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposDeleteCommitCommentCmd struct {
	internal.BaseCmd
	CommentId int64  `required:"" name:"comment_id"`
	Owner     string `name:"owner"`
	Repo      string `required:"" name:"repo"`
}

func (c *ReposDeleteCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/comments/:comment_id")
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposDeleteDeploymentCmd struct {
	internal.BaseCmd
	DeploymentId int64  `required:"" name:"deployment_id"`
	Owner        string `name:"owner"`
	Repo         string `required:"" name:"repo"`
}

func (c *ReposDeleteDeploymentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/deployments/:deployment_id")
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposDeleteDownloadCmd struct {
	internal.BaseCmd
	DownloadId int64  `required:"" name:"download_id"`
	Owner      string `name:"owner"`
	Repo       string `required:"" name:"repo"`
}

func (c *ReposDeleteDownloadCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/downloads/:download_id")
	c.UpdateURLPath("download_id", c.DownloadId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposDeleteHookCmd struct {
	internal.BaseCmd
	HookId int64  `required:"" name:"hook_id"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposDeleteHookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/hooks/:hook_id")
	c.UpdateURLPath("hook_id", c.HookId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposDeleteInvitationCmd struct {
	internal.BaseCmd
	InvitationId int64  `required:"" name:"invitation_id"`
	Owner        string `name:"owner"`
	Repo         string `required:"" name:"repo"`
}

func (c *ReposDeleteInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/invitations/:invitation_id")
	c.UpdateURLPath("invitation_id", c.InvitationId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposDeleteReleaseAssetCmd struct {
	internal.BaseCmd
	AssetId int64  `required:"" name:"asset_id"`
	Owner   string `name:"owner"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposDeleteReleaseAssetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/releases/assets/:asset_id")
	c.UpdateURLPath("asset_id", c.AssetId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposDeleteReleaseCmd struct {
	internal.BaseCmd
	Owner     string `name:"owner"`
	ReleaseId int64  `required:"" name:"release_id"`
	Repo      string `required:"" name:"repo"`
}

func (c *ReposDeleteReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/releases/:release_id")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("release_id", c.ReleaseId)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposDisableAutomatedSecurityFixesCmd struct {
	internal.BaseCmd
	London bool   "name:\"london-preview\" required:\"\" help:\"Enabling or disabling automated security fixes is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.london-preview+json\n```\""
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposDisableAutomatedSecurityFixesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/automated-security-fixes")
	c.UpdatePreview("london", c.London)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposDisablePagesSiteCmd struct {
	internal.BaseCmd
	Owner      string `name:"owner"`
	Repo       string `required:"" name:"repo"`
	Switcheroo bool   "name:\"switcheroo-preview\" required:\"\" help:\"Enabling and disabling Pages in the Pages API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-03-14-enabling-disabling-pages/) preview for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.switcheroo-preview+json\n```\""
}

func (c *ReposDisablePagesSiteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/pages")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("switcheroo", c.Switcheroo)
	return c.DoRequest("DELETE")
}

type ReposDisableVulnerabilityAlertsCmd struct {
	internal.BaseCmd
	Dorian bool   "name:\"dorian-preview\" required:\"\" help:\"Enabling and disabling vulnerability alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.dorian-preview+json\n```\""
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposDisableVulnerabilityAlertsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/vulnerability-alerts")
	c.UpdatePreview("dorian", c.Dorian)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposEnableAutomatedSecurityFixesCmd struct {
	internal.BaseCmd
	London bool   "name:\"london-preview\" required:\"\" help:\"Enabling or disabling automated security fixes is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.london-preview+json\n```\""
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposEnableAutomatedSecurityFixesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/automated-security-fixes")
	c.UpdatePreview("london", c.London)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PUT")
}

type ReposEnableVulnerabilityAlertsCmd struct {
	internal.BaseCmd
	Dorian bool   "name:\"dorian-preview\" required:\"\" help:\"Enabling and disabling vulnerability alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.dorian-preview+json\n```\""
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposEnableVulnerabilityAlertsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/vulnerability-alerts")
	c.UpdatePreview("dorian", c.Dorian)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PUT")
}

type ReposGetAllTopicsCmd struct {
	internal.BaseCmd
	Mercy bool   "name:\"mercy-preview\" required:\"\" help:\"The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```\""
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetAllTopicsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/topics")
	c.UpdatePreview("mercy", c.Mercy)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetAppsWithAccessToProtectedBranchCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposGetAppsWithAccessToProtectedBranchCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions/apps")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetArchiveLinkCmd struct {
	internal.BaseCmd
	ArchiveFormat string `required:"" name:"archive_format"`
	Owner         string `name:"owner"`
	Ref           string `required:"" name:"ref"`
	Repo          string `required:"" name:"repo"`
}

func (c *ReposGetArchiveLinkCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/:archive_format/:ref")
	c.UpdateURLPath("archive_format", c.ArchiveFormat)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetBranchCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposGetBranchCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetBranchProtectionCmd struct {
	internal.BaseCmd
	Branch   string `required:"" name:"branch"`
	LukeCage bool   "name:\"luke-cage-preview\" help:\"The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```\""
	Owner    string `name:"owner"`
	Repo     string `required:"" name:"repo"`
}

func (c *ReposGetBranchProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("luke-cage", c.LukeCage)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetClonesCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Per   string `name:"per"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetClonesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/traffic/clones")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("per", c.Per)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetCmd struct {
	internal.BaseCmd
	Nebula       bool   "name:\"nebula-preview\" help:\"You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```\""
	Owner        string `name:"owner"`
	Repo         string `required:"" name:"repo"`
	ScarletWitch bool   "name:\"scarlet-witch-preview\" help:\"Developers can preview a new `code_of_conduct` key in responses. For more information, see [Codes of Conduct API](https://developer.github.com/v3/codes_of_conduct/).\n\nTo access this new response key during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```\""
}

func (c *ReposGetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo")
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("scarlet-witch", c.ScarletWitch)
	return c.DoRequest("GET")
}

type ReposGetCodeFrequencyStatsCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetCodeFrequencyStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/stats/code_frequency")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetCollaboratorPermissionLevelCmd struct {
	internal.BaseCmd
	Owner    string `name:"owner"`
	Repo     string `required:"" name:"repo"`
	Username string `required:"" name:"username"`
}

func (c *ReposGetCollaboratorPermissionLevelCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/collaborators/:username/permission")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ReposGetCombinedStatusForRefCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Ref   string `required:"" name:"ref"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetCombinedStatusForRefCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/commits/:ref/status")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetCommitActivityStatsCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetCommitActivityStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/stats/commit_activity")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetCommitCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Ref   string `required:"" name:"ref"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/commits/:ref")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetCommitCommentCmd struct {
	internal.BaseCmd
	CommentId    int64  `required:"" name:"comment_id"`
	Owner        string `name:"owner"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   "name:\"squirrel-girl-preview\" help:\"An additional `reactions` object in the commit comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.\""
}

func (c *ReposGetCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/comments/:comment_id")
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReposGetContentsCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Path  string `required:"" name:"path"`
	Ref   string `name:"ref"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetContentsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/contents/:path")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("path", c.Path)
	c.UpdateURLQuery("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetContributorsStatsCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetContributorsStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/stats/contributors")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetDeployKeyCmd struct {
	internal.BaseCmd
	KeyId int64  `required:"" name:"key_id"`
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetDeployKeyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/keys/:key_id")
	c.UpdateURLPath("key_id", c.KeyId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetDeploymentCmd struct {
	internal.BaseCmd
	AntMan       bool   "name:\"ant-man-preview\" help:\"The `transient_environment` and `production_environment` parameters are currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```\""
	DeploymentId int64  `required:"" name:"deployment_id"`
	MachineMan   bool   "name:\"machine-man-preview\" help:\"If a deployment is created via a GitHub App, the response will include the `performed_via_github_app` object with information about the GitHub App. For more information, see the [related blog post](https://developer.github.com/changes/2016-09-14-Integrations-Early-Access).\n\nTo receive the `performed_via_github_app` object in the response, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.machine-man-preview\n```\""
	Owner        string `name:"owner"`
	Repo         string `required:"" name:"repo"`
}

func (c *ReposGetDeploymentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/deployments/:deployment_id")
	c.UpdatePreview("ant-man", c.AntMan)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetDeploymentStatusCmd struct {
	internal.BaseCmd
	AntMan       bool   "name:\"ant-man-preview\" help:\"The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```\""
	DeploymentId int64  `required:"" name:"deployment_id"`
	Flash        bool   "name:\"flash-preview\" help:\"New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must provide the following custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.flash-preview+json\n```\""
	MachineMan   bool   "name:\"machine-man-preview\" help:\"If a deployment is created via a GitHub App, the response will include the `performed_via_github_app` object with information about the GitHub App. For more information, see the [related blog post](https://developer.github.com/changes/2016-09-14-Integrations-Early-Access).\n\nTo receive the `performed_via_github_app` object in the response, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.machine-man-preview\n```\""
	Owner        string `name:"owner"`
	Repo         string `required:"" name:"repo"`
	StatusId     int64  `required:"" name:"status_id"`
}

func (c *ReposGetDeploymentStatusCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id")
	c.UpdatePreview("ant-man", c.AntMan)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdatePreview("flash", c.Flash)
	c.UpdatePreview("machine-man", c.MachineMan)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("status_id", c.StatusId)
	return c.DoRequest("GET")
}

type ReposGetDownloadCmd struct {
	internal.BaseCmd
	DownloadId int64  `required:"" name:"download_id"`
	Owner      string `name:"owner"`
	Repo       string `required:"" name:"repo"`
}

func (c *ReposGetDownloadCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/downloads/:download_id")
	c.UpdateURLPath("download_id", c.DownloadId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetHookCmd struct {
	internal.BaseCmd
	HookId int64  `required:"" name:"hook_id"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposGetHookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/hooks/:hook_id")
	c.UpdateURLPath("hook_id", c.HookId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetLatestPagesBuildCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetLatestPagesBuildCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/pages/builds/latest")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetLatestReleaseCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetLatestReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/releases/latest")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetPagesBuildCmd struct {
	internal.BaseCmd
	BuildId int64  `required:"" name:"build_id"`
	Owner   string `name:"owner"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposGetPagesBuildCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/pages/builds/:build_id")
	c.UpdateURLPath("build_id", c.BuildId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetPagesCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetPagesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/pages")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetParticipationStatsCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetParticipationStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/stats/participation")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetProtectedBranchAdminEnforcementCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposGetProtectedBranchAdminEnforcementCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/enforce_admins")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetProtectedBranchPullRequestReviewEnforcementCmd struct {
	internal.BaseCmd
	Branch   string `required:"" name:"branch"`
	LukeCage bool   "name:\"luke-cage-preview\" help:\"The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```\""
	Owner    string `name:"owner"`
	Repo     string `required:"" name:"repo"`
}

func (c *ReposGetProtectedBranchPullRequestReviewEnforcementCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdatePreview("luke-cage", c.LukeCage)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetProtectedBranchRequiredSignaturesCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
	Zzzax  bool   "name:\"zzzax-preview\" required:\"\" help:\"Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.zzzax-preview+json\n```\""
}

func (c *ReposGetProtectedBranchRequiredSignaturesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/required_signatures")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("zzzax", c.Zzzax)
	return c.DoRequest("GET")
}

type ReposGetProtectedBranchRequiredStatusChecksCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposGetProtectedBranchRequiredStatusChecksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/required_status_checks")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetProtectedBranchRestrictionsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposGetProtectedBranchRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetPunchCardStatsCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetPunchCardStatsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/stats/punch_card")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetReadmeCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Ref   string `name:"ref"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetReadmeCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/readme")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetReleaseAssetCmd struct {
	internal.BaseCmd
	AssetId int64  `required:"" name:"asset_id"`
	Owner   string `name:"owner"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposGetReleaseAssetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/releases/assets/:asset_id")
	c.UpdateURLPath("asset_id", c.AssetId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetReleaseByTagCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	Tag   string `required:"" name:"tag"`
}

func (c *ReposGetReleaseByTagCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/releases/tags/:tag")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("tag", c.Tag)
	return c.DoRequest("GET")
}

type ReposGetReleaseCmd struct {
	internal.BaseCmd
	Owner     string `name:"owner"`
	ReleaseId int64  `required:"" name:"release_id"`
	Repo      string `required:"" name:"repo"`
}

func (c *ReposGetReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/releases/:release_id")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("release_id", c.ReleaseId)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetTeamsWithAccessToProtectedBranchCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposGetTeamsWithAccessToProtectedBranchCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions/teams")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetTopPathsCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetTopPathsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/traffic/popular/paths")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetTopReferrersCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetTopReferrersCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/traffic/popular/referrers")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetUsersWithAccessToProtectedBranchCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposGetUsersWithAccessToProtectedBranchCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions/users")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposGetViewsCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Per   string `name:"per"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposGetViewsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/traffic/views")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("per", c.Per)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListAssetsForReleaseCmd struct {
	internal.BaseCmd
	Owner     string `name:"owner"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	ReleaseId int64  `required:"" name:"release_id"`
	Repo      string `required:"" name:"repo"`
}

func (c *ReposListAssetsForReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/releases/:release_id/assets")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("release_id", c.ReleaseId)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListBranchesCmd struct {
	internal.BaseCmd
	Owner     string `name:"owner"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Protected bool   `name:"protected"`
	Repo      string `required:"" name:"repo"`
}

func (c *ReposListBranchesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("protected", c.Protected)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListBranchesForHeadCommitCmd struct {
	internal.BaseCmd
	CommitSha string `required:"" name:"commit_sha"`
	Groot     bool   "name:\"groot-preview\" required:\"\" help:\"Listing branches or pull requests for a commit in the Commits API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-04-11-pulls-branches-for-commit/) for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.groot-preview+json\n```\""
	Owner     string `name:"owner"`
	Repo      string `required:"" name:"repo"`
}

func (c *ReposListBranchesForHeadCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/commits/:commit_sha/branches-where-head")
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdatePreview("groot", c.Groot)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListCollaboratorsCmd struct {
	internal.BaseCmd
	Affiliation string `name:"affiliation"`
	Owner       string `name:"owner"`
	Page        int64  `name:"page"`
	PerPage     int64  `name:"per_page"`
	Repo        string `required:"" name:"repo"`
}

func (c *ReposListCollaboratorsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/collaborators")
	c.UpdateURLQuery("affiliation", c.Affiliation)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListCommentsForCommitCmd struct {
	internal.BaseCmd
	CommitSha    string `required:"" name:"commit_sha"`
	Owner        string `name:"owner"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   "name:\"squirrel-girl-preview\" help:\"An additional `reactions` object in the commit comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.\""
}

func (c *ReposListCommentsForCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/commits/:commit_sha/comments")
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReposListCommitCommentsCmd struct {
	internal.BaseCmd
	Owner        string `name:"owner"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	Repo         string `required:"" name:"repo"`
	SquirrelGirl bool   "name:\"squirrel-girl-preview\" help:\"An additional `reactions` object in the commit comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\n  application/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.\""
}

func (c *ReposListCommitCommentsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/comments")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	return c.DoRequest("GET")
}

type ReposListCommitsCmd struct {
	internal.BaseCmd
	Author  string `name:"author"`
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	Path    string `name:"path"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	Sha     string `name:"sha"`
	Since   string `name:"since"`
	Until   string `name:"until"`
}

func (c *ReposListCommitsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/commits")
	c.UpdateURLQuery("author", c.Author)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("path", c.Path)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("sha", c.Sha)
	c.UpdateURLQuery("since", c.Since)
	c.UpdateURLQuery("until", c.Until)
	return c.DoRequest("GET")
}

type ReposListContributorsCmd struct {
	internal.BaseCmd
	Anon    string `name:"anon"`
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposListContributorsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/contributors")
	c.UpdateURLQuery("anon", c.Anon)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListDeployKeysCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposListDeployKeysCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/keys")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListDeploymentStatusesCmd struct {
	internal.BaseCmd
	AntMan       bool   "name:\"ant-man-preview\" help:\"The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```\""
	DeploymentId int64  `required:"" name:"deployment_id"`
	Flash        bool   "name:\"flash-preview\" help:\"New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must provide the following custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.flash-preview+json\n```\""
	Owner        string `name:"owner"`
	Page         int64  `name:"page"`
	PerPage      int64  `name:"per_page"`
	Repo         string `required:"" name:"repo"`
}

func (c *ReposListDeploymentStatusesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/deployments/:deployment_id/statuses")
	c.UpdatePreview("ant-man", c.AntMan)
	c.UpdateURLPath("deployment_id", c.DeploymentId)
	c.UpdatePreview("flash", c.Flash)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListDeploymentsCmd struct {
	internal.BaseCmd
	AntMan      bool   "name:\"ant-man-preview\" help:\"The `transient_environment` and `production_environment` parameters are currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```\""
	Environment string `name:"environment"`
	Owner       string `name:"owner"`
	Page        int64  `name:"page"`
	PerPage     int64  `name:"per_page"`
	Ref         string `name:"ref"`
	Repo        string `required:"" name:"repo"`
	Sha         string `name:"sha"`
	Task        string `name:"task"`
}

func (c *ReposListDeploymentsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/deployments")
	c.UpdatePreview("ant-man", c.AntMan)
	c.UpdateURLQuery("environment", c.Environment)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("sha", c.Sha)
	c.UpdateURLQuery("task", c.Task)
	return c.DoRequest("GET")
}

type ReposListDownloadsCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposListDownloadsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/downloads")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListForAuthenticatedUserCmd struct {
	internal.BaseCmd
	Affiliation string `name:"affiliation"`
	Direction   string `name:"direction"`
	Page        int64  `name:"page"`
	PerPage     int64  `name:"per_page"`
	Sort        string `name:"sort"`
	Type        string `name:"type"`
	Visibility  string `name:"visibility"`
}

func (c *ReposListForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repos")
	c.UpdateURLQuery("affiliation", c.Affiliation)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("type", c.Type)
	c.UpdateURLQuery("visibility", c.Visibility)
	return c.DoRequest("GET")
}

type ReposListForOrgCmd struct {
	internal.BaseCmd
	Baptiste  bool   "name:\"baptiste-preview\" help:\"The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```\""
	Direction string `name:"direction"`
	Nebula    bool   "name:\"nebula-preview\" help:\"You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```\""
	Org       string `required:"" name:"org"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Sort      string `name:"sort"`
	Type      string `name:"type"`
}

func (c *ReposListForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/:org/repos")
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("type", c.Type)
	return c.DoRequest("GET")
}

type ReposListForUserCmd struct {
	internal.BaseCmd
	Direction string `name:"direction"`
	Nebula    bool   "name:\"nebula-preview\" help:\"You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```\""
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Sort      string `name:"sort"`
	Type      string `name:"type"`
	Username  string `required:"" name:"username"`
}

func (c *ReposListForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/:username/repos")
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("sort", c.Sort)
	c.UpdateURLQuery("type", c.Type)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type ReposListForksCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	Sort    string `name:"sort"`
}

func (c *ReposListForksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/forks")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("sort", c.Sort)
	return c.DoRequest("GET")
}

type ReposListHooksCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposListHooksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/hooks")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListInvitationsCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposListInvitationsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/invitations")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListInvitationsForAuthenticatedUserCmd struct {
	internal.BaseCmd
	Page    int64 `name:"page"`
	PerPage int64 `name:"per_page"`
}

func (c *ReposListInvitationsForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/repository_invitations")
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	return c.DoRequest("GET")
}

type ReposListLanguagesCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposListLanguagesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/languages")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListPagesBuildsCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposListPagesBuildsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/pages/builds")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListProtectedBranchRequiredStatusChecksContextsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposListProtectedBranchRequiredStatusChecksContextsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListPublicCmd struct {
	internal.BaseCmd
	Since int64 `name:"since"`
}

func (c *ReposListPublicCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repositories")
	c.UpdateURLQuery("since", c.Since)
	return c.DoRequest("GET")
}

type ReposListPullRequestsAssociatedWithCommitCmd struct {
	internal.BaseCmd
	CommitSha string `required:"" name:"commit_sha"`
	Groot     bool   "name:\"groot-preview\" required:\"\" help:\"Listing branches or pull requests for a commit in the Commits API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-04-11-pulls-branches-for-commit/) for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.groot-preview+json\n```\""
	Owner     string `name:"owner"`
	Page      int64  `name:"page"`
	PerPage   int64  `name:"per_page"`
	Repo      string `required:"" name:"repo"`
}

func (c *ReposListPullRequestsAssociatedWithCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/commits/:commit_sha/pulls")
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdatePreview("groot", c.Groot)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListReleasesCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposListReleasesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/releases")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListStatusesForRefCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Ref     string `required:"" name:"ref"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposListStatusesForRefCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/commits/:ref/statuses")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListTagsCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposListTagsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/tags")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposListTeamsCmd struct {
	internal.BaseCmd
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposListTeamsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/teams")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposMergeCmd struct {
	internal.BaseCmd
	Base          string `required:"" name:"base"`
	CommitMessage string `name:"commit_message"`
	Head          string `required:"" name:"head"`
	Owner         string `name:"owner"`
	Repo          string `required:"" name:"repo"`
}

func (c *ReposMergeCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/merges")
	c.UpdateBody("base", c.Base)
	c.UpdateBody("commit_message", c.CommitMessage)
	c.UpdateBody("head", c.Head)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposPingHookCmd struct {
	internal.BaseCmd
	HookId int64  `required:"" name:"hook_id"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposPingHookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/hooks/:hook_id/pings")
	c.UpdateURLPath("hook_id", c.HookId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposRemoveBranchProtectionCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposRemoveBranchProtectionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposRemoveCollaboratorCmd struct {
	internal.BaseCmd
	Owner    string `name:"owner"`
	Repo     string `required:"" name:"repo"`
	Username string `required:"" name:"username"`
}

func (c *ReposRemoveCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/collaborators/:username")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type ReposRemoveDeployKeyCmd struct {
	internal.BaseCmd
	KeyId int64  `required:"" name:"key_id"`
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposRemoveDeployKeyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/keys/:key_id")
	c.UpdateURLPath("key_id", c.KeyId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchAdminEnforcementCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposRemoveProtectedBranchAdminEnforcementCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/enforce_admins")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchAppRestrictionsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposRemoveProtectedBranchAppRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions/apps")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchPullRequestReviewEnforcementCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposRemoveProtectedBranchPullRequestReviewEnforcementCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchRequiredSignaturesCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
	Zzzax  bool   "name:\"zzzax-preview\" required:\"\" help:\"Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.zzzax-preview+json\n```\""
}

func (c *ReposRemoveProtectedBranchRequiredSignaturesCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/required_signatures")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdatePreview("zzzax", c.Zzzax)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchRequiredStatusChecksCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposRemoveProtectedBranchRequiredStatusChecksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/required_status_checks")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchRequiredStatusChecksContextsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposRemoveProtectedBranchRequiredStatusChecksContextsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchRestrictionsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposRemoveProtectedBranchRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchTeamRestrictionsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposRemoveProtectedBranchTeamRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions/teams")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposRemoveProtectedBranchUserRestrictionsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposRemoveProtectedBranchUserRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions/users")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ReposReplaceAllTopicsCmd struct {
	internal.BaseCmd
	Mercy bool     "name:\"mercy-preview\" required:\"\" help:\"Repository topics on GitHub are currently available for developers to preview. To use this endpoint, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```\""
	Names []string `required:"" name:"names"`
	Owner string   `name:"owner"`
	Repo  string   `required:"" name:"repo"`
}

func (c *ReposReplaceAllTopicsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/topics")
	c.UpdatePreview("mercy", c.Mercy)
	c.UpdateBody("names", c.Names)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PUT")
}

type ReposReplaceProtectedBranchAppRestrictionsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposReplaceProtectedBranchAppRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions/apps")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PUT")
}

type ReposReplaceProtectedBranchRequiredStatusChecksContextsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposReplaceProtectedBranchRequiredStatusChecksContextsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PUT")
}

type ReposReplaceProtectedBranchTeamRestrictionsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposReplaceProtectedBranchTeamRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions/teams")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PUT")
}

type ReposReplaceProtectedBranchUserRestrictionsCmd struct {
	internal.BaseCmd
	Branch string `required:"" name:"branch"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposReplaceProtectedBranchUserRestrictionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/restrictions/users")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PUT")
}

type ReposRequestPageBuildCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposRequestPageBuildCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/pages/builds")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposRetrieveCommunityProfileMetricsCmd struct {
	internal.BaseCmd
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ReposRetrieveCommunityProfileMetricsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/community/profile")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ReposTestPushHookCmd struct {
	internal.BaseCmd
	HookId int64  `required:"" name:"hook_id"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *ReposTestPushHookCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/hooks/:hook_id/tests")
	c.UpdateURLPath("hook_id", c.HookId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ReposTransferCmd struct {
	internal.BaseCmd
	NewOwner string  `name:"new_owner"`
	Owner    string  `name:"owner"`
	Repo     string  `required:"" name:"repo"`
	TeamIds  []int64 `name:"team_ids"`
}

func (c *ReposTransferCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/transfer")
	c.UpdateBody("new_owner", c.NewOwner)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("team_ids", c.TeamIds)
	return c.DoRequest("POST")
}

type ReposUpdateCmd struct {
	internal.BaseCmd
	AllowMergeCommit    bool   `name:"allow_merge_commit"`
	AllowRebaseMerge    bool   `name:"allow_rebase_merge"`
	AllowSquashMerge    bool   `name:"allow_squash_merge"`
	Archived            bool   `name:"archived"`
	Baptiste            bool   "name:\"baptiste-preview\" help:\"The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```\""
	DefaultBranch       string `name:"default_branch"`
	DeleteBranchOnMerge bool   `name:"delete_branch_on_merge"`
	Description         string `name:"description"`
	HasIssues           bool   `name:"has_issues"`
	HasProjects         bool   `name:"has_projects"`
	HasWiki             bool   `name:"has_wiki"`
	Homepage            string `name:"homepage"`
	IsTemplate          bool   `name:"is_template"`
	Name                string `name:"name"`
	Nebula              bool   "name:\"nebula-preview\" help:\"You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```\""
	Owner               string `name:"owner"`
	Private             bool   `name:"private"`
	Repo                string `required:"" name:"repo"`
	Visibility          string `name:"visibility"`
}

func (c *ReposUpdateCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo")
	c.UpdateBody("allow_merge_commit", c.AllowMergeCommit)
	c.UpdateBody("allow_rebase_merge", c.AllowRebaseMerge)
	c.UpdateBody("allow_squash_merge", c.AllowSquashMerge)
	c.UpdateBody("archived", c.Archived)
	c.UpdatePreview("baptiste", c.Baptiste)
	c.UpdateBody("default_branch", c.DefaultBranch)
	c.UpdateBody("delete_branch_on_merge", c.DeleteBranchOnMerge)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("has_issues", c.HasIssues)
	c.UpdateBody("has_projects", c.HasProjects)
	c.UpdateBody("has_wiki", c.HasWiki)
	c.UpdateBody("homepage", c.Homepage)
	c.UpdateBody("is_template", c.IsTemplate)
	c.UpdateBody("name", c.Name)
	c.UpdatePreview("nebula", c.Nebula)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateBody("private", c.Private)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("visibility", c.Visibility)
	return c.DoRequest("PATCH")
}

type ReposUpdateCommitCommentCmd struct {
	internal.BaseCmd
	Body      string `required:"" name:"body"`
	CommentId int64  `required:"" name:"comment_id"`
	Owner     string `name:"owner"`
	Repo      string `required:"" name:"repo"`
}

func (c *ReposUpdateCommitCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/comments/:comment_id")
	c.UpdateBody("body", c.Body)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PATCH")
}

type ReposUpdateInformationAboutPagesSiteCmd struct {
	internal.BaseCmd
	Cname  string `name:"cname"`
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
	Source string `name:"source"`
}

func (c *ReposUpdateInformationAboutPagesSiteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/pages")
	c.UpdateBody("cname", c.Cname)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("source", c.Source)
	return c.DoRequest("PUT")
}

type ReposUpdateInvitationCmd struct {
	internal.BaseCmd
	InvitationId int64  `required:"" name:"invitation_id"`
	Owner        string `name:"owner"`
	Permissions  string `name:"permissions"`
	Repo         string `required:"" name:"repo"`
}

func (c *ReposUpdateInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/invitations/:invitation_id")
	c.UpdateURLPath("invitation_id", c.InvitationId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateBody("permissions", c.Permissions)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PATCH")
}

type ReposUpdateProtectedBranchRequiredStatusChecksCmd struct {
	internal.BaseCmd
	Branch   string   `required:"" name:"branch"`
	Contexts []string `name:"contexts"`
	Owner    string   `name:"owner"`
	Repo     string   `required:"" name:"repo"`
	Strict   bool     `name:"strict"`
}

func (c *ReposUpdateProtectedBranchRequiredStatusChecksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/branches/:branch/protection/required_status_checks")
	c.UpdateURLPath("branch", c.Branch)
	c.UpdateBody("contexts", c.Contexts)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("strict", c.Strict)
	return c.DoRequest("PATCH")
}

type ReposUpdateReleaseAssetCmd struct {
	internal.BaseCmd
	AssetId int64  `required:"" name:"asset_id"`
	Label   string `name:"label"`
	Name    string `name:"name"`
	Owner   string `name:"owner"`
	Repo    string `required:"" name:"repo"`
}

func (c *ReposUpdateReleaseAssetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/releases/assets/:asset_id")
	c.UpdateURLPath("asset_id", c.AssetId)
	c.UpdateBody("label", c.Label)
	c.UpdateBody("name", c.Name)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PATCH")
}

type ReposUpdateReleaseCmd struct {
	internal.BaseCmd
	Body            string `name:"body"`
	Draft           bool   `name:"draft"`
	Name            string `name:"name"`
	Owner           string `name:"owner"`
	Prerelease      bool   `name:"prerelease"`
	ReleaseId       int64  `required:"" name:"release_id"`
	Repo            string `required:"" name:"repo"`
	TagName         string `name:"tag_name"`
	TargetCommitish string `name:"target_commitish"`
}

func (c *ReposUpdateReleaseCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/releases/:release_id")
	c.UpdateBody("body", c.Body)
	c.UpdateBody("draft", c.Draft)
	c.UpdateBody("name", c.Name)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateBody("prerelease", c.Prerelease)
	c.UpdateURLPath("release_id", c.ReleaseId)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("tag_name", c.TagName)
	c.UpdateBody("target_commitish", c.TargetCommitish)
	return c.DoRequest("PATCH")
}

type ReposUploadReleaseAssetCmd struct {
	internal.BaseCmd
	ContentLength string `required:"" name:"content-length"`
	ContentType   string `required:"" name:"content-type"`
	Label         string `name:"label"`
	Name          string `name:"name"`
	Owner         string `name:"owner"`
	ReleaseId     int64  `required:"" name:"release_id"`
	Repo          string `required:"" name:"repo"`
}

func (c *ReposUploadReleaseAssetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/releases/:release_id/assets")
	c.AddRequestHeader("content-length", c.ContentLength)
	c.AddRequestHeader("content-type", c.ContentType)
	c.UpdateURLQuery("label", c.Label)
	c.UpdateURLQuery("name", c.Name)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("release_id", c.ReleaseId)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}
