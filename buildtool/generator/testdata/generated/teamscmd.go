// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import "github.com/octo-cli/octo-cli/internal"

type TeamsCmd struct {
	List                     TeamsListCmd                     `cmd:"" help:"List teams - https://developer.github.com/v3/teams/#list-teams"`
	Get                      TeamsGetCmd                      `cmd:"" help:"Get team - https://developer.github.com/v3/teams/#get-team"`
	Create                   TeamsCreateCmd                   `cmd:"" help:"Create team - https://developer.github.com/v3/teams/#create-team"`
	Edit                     TeamsEditCmd                     `cmd:"" help:"Edit team - https://developer.github.com/v3/teams/#edit-team"`
	Delete                   TeamsDeleteCmd                   `cmd:"" help:"Delete team - https://developer.github.com/v3/teams/#delete-team"`
	ListChild                TeamsListChildCmd                `cmd:"" help:"List child teams - https://developer.github.com/v3/teams/#list-child-teams"`
	ListRepos                TeamsListReposCmd                `cmd:"" help:"List team repos - https://developer.github.com/v3/teams/#list-team-repos"`
	CheckManagesRepo         TeamsCheckManagesRepoCmd         `cmd:"" help:"Check if a team manages a repository - https://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository"`
	AddOrUpdateRepo          TeamsAddOrUpdateRepoCmd          `cmd:"" help:"Add or update team repository - https://developer.github.com/v3/teams/#add-or-update-team-repository"`
	RemoveRepo               TeamsRemoveRepoCmd               `cmd:"" help:"Remove team repository - https://developer.github.com/v3/teams/#remove-team-repository"`
	ListForAuthenticatedUser TeamsListForAuthenticatedUserCmd `cmd:"" help:"List user teams - https://developer.github.com/v3/teams/#list-user-teams"`
	ListProjects             TeamsListProjectsCmd             `cmd:"" help:"List team projects - https://developer.github.com/v3/teams/#list-team-projects"`
	ReviewProject            TeamsReviewProjectCmd            `cmd:"" help:"Review a team project - https://developer.github.com/v3/teams/#review-a-team-project"`
	AddOrUpdateProject       TeamsAddOrUpdateProjectCmd       `cmd:"" help:"Add or update team project - https://developer.github.com/v3/teams/#add-or-update-team-project"`
	RemoveProject            TeamsRemoveProjectCmd            `cmd:"" help:"Remove team project - https://developer.github.com/v3/teams/#remove-team-project"`
	ListDiscussions          TeamsListDiscussionsCmd          `cmd:"" help:"List discussions - https://developer.github.com/v3/teams/discussions/#list-discussions"`
	GetDiscussion            TeamsGetDiscussionCmd            `cmd:"" help:"Get a single discussion - https://developer.github.com/v3/teams/discussions/#get-a-single-discussion"`
	CreateDiscussion         TeamsCreateDiscussionCmd         `cmd:"" help:"Create a discussion - https://developer.github.com/v3/teams/discussions/#create-a-discussion"`
	EditDiscussion           TeamsEditDiscussionCmd           `cmd:"" help:"Edit a discussion - https://developer.github.com/v3/teams/discussions/#edit-a-discussion"`
	DeleteDiscussion         TeamsDeleteDiscussionCmd         `cmd:"" help:"Delete a discussion - https://developer.github.com/v3/teams/discussions/#delete-a-discussion"`
	ListDiscussionComments   TeamsListDiscussionCommentsCmd   `cmd:"" help:"List comments - https://developer.github.com/v3/teams/discussion_comments/#list-comments"`
	GetDiscussionComment     TeamsGetDiscussionCommentCmd     `cmd:"" help:"Get a single comment - https://developer.github.com/v3/teams/discussion_comments/#get-a-single-comment"`
	CreateDiscussionComment  TeamsCreateDiscussionCommentCmd  `cmd:"" help:"Create a comment - https://developer.github.com/v3/teams/discussion_comments/#create-a-comment"`
	EditDiscussionComment    TeamsEditDiscussionCommentCmd    `cmd:"" help:"Edit a comment - https://developer.github.com/v3/teams/discussion_comments/#edit-a-comment"`
	DeleteDiscussionComment  TeamsDeleteDiscussionCommentCmd  `cmd:"" help:"Delete a comment - https://developer.github.com/v3/teams/discussion_comments/#delete-a-comment"`
	ListMembers              TeamsListMembersCmd              `cmd:"" help:"List team members - https://developer.github.com/v3/teams/members/#list-team-members"`
	GetMember                TeamsGetMemberCmd                `cmd:"" help:"Get team member - https://developer.github.com/v3/teams/members/#get-team-member"`
	AddMember                TeamsAddMemberCmd                `cmd:"" help:"Add team member - https://developer.github.com/v3/teams/members/#add-team-member"`
	RemoveMember             TeamsRemoveMemberCmd             `cmd:"" help:"Remove team member - https://developer.github.com/v3/teams/members/#remove-team-member"`
	GetMembership            TeamsGetMembershipCmd            `cmd:"" help:"Get team membership - https://developer.github.com/v3/teams/members/#get-team-membership"`
	AddOrUpdateMembership    TeamsAddOrUpdateMembershipCmd    `cmd:"" help:"Add or update team membership - https://developer.github.com/v3/teams/members/#add-or-update-team-membership"`
	RemoveMembership         TeamsRemoveMembershipCmd         `cmd:"" help:"Remove team membership - https://developer.github.com/v3/teams/members/#remove-team-membership"`
	ListPendingInvitations   TeamsListPendingInvitationsCmd   `cmd:"" help:"List pending team invitations - https://developer.github.com/v3/teams/members/#list-pending-team-invitations"`
}

type TeamsListCmd struct {
	internal.BaseCmd
	Hellcat bool   "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	Org     string `required:"" name:"org"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *TeamsListCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/:org/teams")
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsGetCmd struct {
	internal.BaseCmd
	Hellcat bool  "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	TeamId  int64 `required:"" name:"team_id"`
}

func (c *TeamsGetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id")
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("team_id", c.TeamId)
	return c.DoRequest("GET")
}

type TeamsCreateCmd struct {
	internal.BaseCmd
	Hellcat      bool     "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	Org          string   `required:"" name:"org"`
	Name         string   `required:"" name:"name" help:"The name of the team."`
	Description  string   `name:"description" help:"The description of the team."`
	Maintainers  []string `name:"maintainers" help:"The logins of organization members to add as maintainers of the team."`
	RepoNames    []string `name:"repo_names" help:"The full name (e.g., 'organization-name/repository-name') of repositories to add the team to."`
	Privacy      string   "name:\"privacy\" help:\"The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.  \nDefault for child team: `closed`  \n**Note**: You must pass the `hellcat-preview` media type to set privacy default to `closed` for child teams. **For a parent or child team:**  \""
	Permission   string   "name:\"permission\" help:\"**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.\""
	ParentTeamId int64    "name:\"parent_team_id\" help:\"The ID of a team to set as the parent team. **Note**: You must pass the `hellcat-preview` media type to use this parameter.\""
}

func (c *TeamsCreateCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/:org/teams")
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("org", c.Org)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("maintainers", c.Maintainers)
	c.UpdateBody("repo_names", c.RepoNames)
	c.UpdateBody("privacy", c.Privacy)
	c.UpdateBody("permission", c.Permission)
	c.UpdateBody("parent_team_id", c.ParentTeamId)
	return c.DoRequest("POST")
}

type TeamsEditCmd struct {
	internal.BaseCmd
	Hellcat      bool   "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	TeamId       int64  `required:"" name:"team_id"`
	Name         string `required:"" name:"name" help:"The name of the team."`
	Description  string `name:"description" help:"The description of the team."`
	Privacy      string "name:\"privacy\" help:\"The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.\""
	Permission   string "name:\"permission\" help:\"**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.\""
	ParentTeamId int64  "name:\"parent_team_id\" help:\"The ID of a team to set as the parent team. **Note**: You must pass the `hellcat-preview` media type to use this parameter.\""
}

func (c *TeamsEditCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id")
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateBody("name", c.Name)
	c.UpdateBody("description", c.Description)
	c.UpdateBody("privacy", c.Privacy)
	c.UpdateBody("permission", c.Permission)
	c.UpdateBody("parent_team_id", c.ParentTeamId)
	return c.DoRequest("PATCH")
}

type TeamsDeleteCmd struct {
	internal.BaseCmd
	Hellcat bool  "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	TeamId  int64 `required:"" name:"team_id"`
}

func (c *TeamsDeleteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id")
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("team_id", c.TeamId)
	return c.DoRequest("DELETE")
}

type TeamsListChildCmd struct {
	internal.BaseCmd
	Hellcat bool  "name:\"hellcat-preview\" required:\"\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	TeamId  int64 `required:"" name:"team_id"`
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *TeamsListChildCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/teams")
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsListReposCmd struct {
	internal.BaseCmd
	Hellcat bool  "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	TeamId  int64 `required:"" name:"team_id"`
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *TeamsListReposCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/repos")
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsCheckManagesRepoCmd struct {
	internal.BaseCmd
	Hellcat bool   "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	TeamId  int64  `required:"" name:"team_id"`
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
}

func (c *TeamsCheckManagesRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/repos/:owner/:repo")
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type TeamsAddOrUpdateRepoCmd struct {
	internal.BaseCmd
	Hellcat    bool   "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	TeamId     int64  `required:"" name:"team_id"`
	Owner      string `required:"" name:"owner"`
	Repo       string `required:"" name:"repo"`
	Permission string "name:\"permission\" help:\"The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.  \n**Note**: If you pass the `hellcat-preview` media type, you can promote—but not demote—a `permission` attribute inherited through a parent team.\""
}

func (c *TeamsAddOrUpdateRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/repos/:owner/:repo")
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("permission", c.Permission)
	return c.DoRequest("PUT")
}

type TeamsRemoveRepoCmd struct {
	internal.BaseCmd
	TeamId int64  `required:"" name:"team_id"`
	Owner  string `required:"" name:"owner"`
	Repo   string `required:"" name:"repo"`
}

func (c *TeamsRemoveRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/repos/:owner/:repo")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type TeamsListForAuthenticatedUserCmd struct {
	internal.BaseCmd
	Hellcat bool  "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *TeamsListForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/user/teams")
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsListProjectsCmd struct {
	internal.BaseCmd
	Inertia bool  "name:\"inertia-preview\" required:\"\" help:\"The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\n  application/vnd.github.inertia-preview+json\n\n```\""
	Hellcat bool  "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	TeamId  int64 `required:"" name:"team_id"`
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *TeamsListProjectsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/projects")
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsReviewProjectCmd struct {
	internal.BaseCmd
	Inertia   bool  "name:\"inertia-preview\" required:\"\" help:\"The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\n  application/vnd.github.inertia-preview+json\n\n```\""
	Hellcat   bool  "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	TeamId    int64 `required:"" name:"team_id"`
	ProjectId int64 `required:"" name:"project_id"`
}

func (c *TeamsReviewProjectCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/projects/:project_id")
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("project_id", c.ProjectId)
	return c.DoRequest("GET")
}

type TeamsAddOrUpdateProjectCmd struct {
	internal.BaseCmd
	Inertia    bool   "name:\"inertia-preview\" required:\"\" help:\"The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\n  application/vnd.github.inertia-preview+json\n\n```\""
	Hellcat    bool   "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	TeamId     int64  `required:"" name:"team_id"`
	ProjectId  int64  `required:"" name:"project_id"`
	Permission string "name:\"permission\" help:\"The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see '[HTTP verbs](https://developer.github.com/v3/#http-verbs).'  \n**Note**: If you pass the `hellcat-preview` media type, you can promote—but not demote—a `permission` attribute inherited from a parent team.\""
}

func (c *TeamsAddOrUpdateProjectCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/projects/:project_id")
	c.UpdatePreview("inertia", c.Inertia)
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("project_id", c.ProjectId)
	c.UpdateBody("permission", c.Permission)
	return c.DoRequest("PUT")
}

type TeamsRemoveProjectCmd struct {
	internal.BaseCmd
	TeamId    int64 `required:"" name:"team_id"`
	ProjectId int64 `required:"" name:"project_id"`
}

func (c *TeamsRemoveProjectCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/projects/:project_id")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("project_id", c.ProjectId)
	return c.DoRequest("DELETE")
}

type TeamsListDiscussionsCmd struct {
	internal.BaseCmd
	Echo         bool   "name:\"echo-preview\" required:\"\" help:\"**Note:** The team discussions API is currently available for developers to preview. See the [blog post](/changes/2018-02-07-team-discussions-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.echo-preview+json\n\n```\""
	SquirrelGirl bool   "name:\"squirrel-girl-preview\" help:\"**Note:** The [reactions API](/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](/v3/reactions) reactions. See the [blog post](/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n\n```\""
	TeamId       int64  `required:"" name:"team_id"`
	Direction    string "name:\"direction\" help:\"Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.\""
	PerPage      int64  `name:"per_page" help:"Results per page (max 100)"`
	Page         int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *TeamsListDiscussionsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/discussions")
	c.UpdatePreview("echo", c.Echo)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsGetDiscussionCmd struct {
	internal.BaseCmd
	Echo             bool  "name:\"echo-preview\" required:\"\" help:\"**Note:** The team discussions API is currently available for developers to preview. See the [blog post](/changes/2018-02-07-team-discussions-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.echo-preview+json\n\n```\""
	SquirrelGirl     bool  "name:\"squirrel-girl-preview\" help:\"**Note:** The [reactions API](/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](/v3/reactions) reactions. See the [blog post](/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n\n```\""
	TeamId           int64 `required:"" name:"team_id"`
	DiscussionNumber int64 `required:"" name:"discussion_number"`
}

func (c *TeamsGetDiscussionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/discussions/:discussion_number")
	c.UpdatePreview("echo", c.Echo)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	return c.DoRequest("GET")
}

type TeamsCreateDiscussionCmd struct {
	internal.BaseCmd
	Echo         bool   "name:\"echo-preview\" required:\"\" help:\"**Note:** The team discussions API is currently available for developers to preview. See the [blog post](/changes/2018-02-07-team-discussions-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.echo-preview+json\n\n```\""
	SquirrelGirl bool   "name:\"squirrel-girl-preview\" help:\"**Note:** The [reactions API](/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](/v3/reactions) reactions. See the [blog post](/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n\n```\""
	TeamId       int64  `required:"" name:"team_id"`
	Title        string `required:"" name:"title" help:"The discussion post's title."`
	Body         string `required:"" name:"body" help:"The discussion post's body text."`
	Private      bool   "name:\"private\" help:\"Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.\""
}

func (c *TeamsCreateDiscussionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/discussions")
	c.UpdatePreview("echo", c.Echo)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateBody("title", c.Title)
	c.UpdateBody("body", c.Body)
	c.UpdateBody("private", c.Private)
	return c.DoRequest("POST")
}

type TeamsEditDiscussionCmd struct {
	internal.BaseCmd
	Echo             bool   "name:\"echo-preview\" required:\"\" help:\"**Note:** The team discussions API is currently available for developers to preview. See the [blog post](/changes/2018-02-07-team-discussions-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.echo-preview+json\n\n```\""
	SquirrelGirl     bool   "name:\"squirrel-girl-preview\" help:\"**Note:** The [reactions API](/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](/v3/reactions) reactions. See the [blog post](/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n\n```\""
	TeamId           int64  `required:"" name:"team_id"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Title            string `name:"title" help:"The discussion post's title."`
	Body             string `name:"body" help:"The discussion post's body text."`
}

func (c *TeamsEditDiscussionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/discussions/:discussion_number")
	c.UpdatePreview("echo", c.Echo)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateBody("title", c.Title)
	c.UpdateBody("body", c.Body)
	return c.DoRequest("PATCH")
}

type TeamsDeleteDiscussionCmd struct {
	internal.BaseCmd
	Echo             bool  "name:\"echo-preview\" required:\"\" help:\"**Note:** The team discussions API is currently available for developers to preview. See the [blog post](/changes/2018-02-07-team-discussions-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.echo-preview+json\n\n```\""
	TeamId           int64 `required:"" name:"team_id"`
	DiscussionNumber int64 `required:"" name:"discussion_number"`
}

func (c *TeamsDeleteDiscussionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/discussions/:discussion_number")
	c.UpdatePreview("echo", c.Echo)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	return c.DoRequest("DELETE")
}

type TeamsListDiscussionCommentsCmd struct {
	internal.BaseCmd
	Echo             bool   "name:\"echo-preview\" required:\"\" help:\"**Note:** The team discussions API is currently available for developers to preview. See the [blog post](/changes/2018-02-07-team-discussions-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.echo-preview+json\n\n```\""
	SquirrelGirl     bool   "name:\"squirrel-girl-preview\" help:\"**Note:** The [reactions API](/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](/v3/reactions) reactions. See the [blog post](/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n\n```\""
	TeamId           int64  `required:"" name:"team_id"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Direction        string "name:\"direction\" help:\"Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.\""
	PerPage          int64  `name:"per_page" help:"Results per page (max 100)"`
	Page             int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *TeamsListDiscussionCommentsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/discussions/:discussion_number/comments")
	c.UpdatePreview("echo", c.Echo)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLQuery("direction", c.Direction)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsGetDiscussionCommentCmd struct {
	internal.BaseCmd
	Echo             bool  "name:\"echo-preview\" required:\"\" help:\"**Note:** The team discussions API is currently available for developers to preview. See the [blog post](/changes/2018-02-07-team-discussions-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.echo-preview+json\n\n```\""
	SquirrelGirl     bool  "name:\"squirrel-girl-preview\" help:\"**Note:** The [reactions API](/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](/v3/reactions) reactions. See the [blog post](/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n\n```\""
	TeamId           int64 `required:"" name:"team_id"`
	DiscussionNumber int64 `required:"" name:"discussion_number"`
	CommentNumber    int64 `required:"" name:"comment_number"`
}

func (c *TeamsGetDiscussionCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/discussions/:discussion_number/comments/:comment_number")
	c.UpdatePreview("echo", c.Echo)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	return c.DoRequest("GET")
}

type TeamsCreateDiscussionCommentCmd struct {
	internal.BaseCmd
	Echo             bool   "name:\"echo-preview\" required:\"\" help:\"**Note:** The team discussions API is currently available for developers to preview. See the [blog post](/changes/2018-02-07-team-discussions-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.echo-preview+json\n\n```\""
	SquirrelGirl     bool   "name:\"squirrel-girl-preview\" help:\"**Note:** The [reactions API](/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](/v3/reactions) reactions. See the [blog post](/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n\n```\""
	TeamId           int64  `required:"" name:"team_id"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	Body             string `required:"" name:"body" help:"The discussion comment's body text."`
}

func (c *TeamsCreateDiscussionCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/discussions/:discussion_number/comments")
	c.UpdatePreview("echo", c.Echo)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateBody("body", c.Body)
	return c.DoRequest("POST")
}

type TeamsEditDiscussionCommentCmd struct {
	internal.BaseCmd
	Echo             bool   "name:\"echo-preview\" required:\"\" help:\"**Note:** The team discussions API is currently available for developers to preview. See the [blog post](/changes/2018-02-07-team-discussions-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.echo-preview+json\n\n```\""
	SquirrelGirl     bool   "name:\"squirrel-girl-preview\" help:\"**Note:** The [reactions API](/v3/reactions/) is available for developers to preview. The `url` can be used to construct the API location for [listing and creating](/v3/reactions) reactions. See the [blog post](/changes/2016-05-12-reactions-api-preview) for full details. To receive the `reactions` object in the response for this endpoint you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n\n```\""
	TeamId           int64  `required:"" name:"team_id"`
	DiscussionNumber int64  `required:"" name:"discussion_number"`
	CommentNumber    int64  `required:"" name:"comment_number"`
	Body             string `required:"" name:"body" help:"The discussion comment's body text."`
}

func (c *TeamsEditDiscussionCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/discussions/:discussion_number/comments/:comment_number")
	c.UpdatePreview("echo", c.Echo)
	c.UpdatePreview("squirrel-girl", c.SquirrelGirl)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	c.UpdateBody("body", c.Body)
	return c.DoRequest("PATCH")
}

type TeamsDeleteDiscussionCommentCmd struct {
	internal.BaseCmd
	Echo             bool  "name:\"echo-preview\" required:\"\" help:\"**Note:** The team discussions API is currently available for developers to preview. See the [blog post](/changes/2018-02-07-team-discussions-api) for full details. To access the API during the preview period, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.echo-preview+json\n\n```\""
	TeamId           int64 `required:"" name:"team_id"`
	DiscussionNumber int64 `required:"" name:"discussion_number"`
	CommentNumber    int64 `required:"" name:"comment_number"`
}

func (c *TeamsDeleteDiscussionCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/discussions/:discussion_number/comments/:comment_number")
	c.UpdatePreview("echo", c.Echo)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("discussion_number", c.DiscussionNumber)
	c.UpdateURLPath("comment_number", c.CommentNumber)
	return c.DoRequest("DELETE")
}

type TeamsListMembersCmd struct {
	internal.BaseCmd
	Hellcat bool   "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	TeamId  int64  `required:"" name:"team_id"`
	Role    string "name:\"role\" help:\"Filters members returned by their role in the team. Can be one of:  \n\\* `member` - normal members of the team.  \n\\* `maintainer` - team maintainers.  \n\\* `all` - all members of the team.\""
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *TeamsListMembersCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/members")
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLQuery("role", c.Role)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type TeamsGetMemberCmd struct {
	internal.BaseCmd
	TeamId   int64  `required:"" name:"team_id"`
	Username string `required:"" name:"username"`
}

func (c *TeamsGetMemberCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/members/:username")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type TeamsAddMemberCmd struct {
	internal.BaseCmd
	TeamId   int64  `required:"" name:"team_id"`
	Username string `required:"" name:"username"`
}

func (c *TeamsAddMemberCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/members/:username")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("PUT")
}

type TeamsRemoveMemberCmd struct {
	internal.BaseCmd
	TeamId   int64  `required:"" name:"team_id"`
	Username string `required:"" name:"username"`
}

func (c *TeamsRemoveMemberCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/members/:username")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type TeamsGetMembershipCmd struct {
	internal.BaseCmd
	Hellcat  bool   "name:\"hellcat-preview\" help:\"**Note:** The Nested Teams API is currently available for developers to preview. See the [blog post](/changes/2017-08-30-preview-nested-teams) for full details. To access the API, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.hellcat-preview+json\n\n```\""
	TeamId   int64  `required:"" name:"team_id"`
	Username string `required:"" name:"username"`
}

func (c *TeamsGetMembershipCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/memberships/:username")
	c.UpdatePreview("hellcat", c.Hellcat)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("GET")
}

type TeamsAddOrUpdateMembershipCmd struct {
	internal.BaseCmd
	TeamId   int64  `required:"" name:"team_id"`
	Username string `required:"" name:"username"`
	Role     string "name:\"role\" help:\"The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.\""
}

func (c *TeamsAddOrUpdateMembershipCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/memberships/:username")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("username", c.Username)
	c.UpdateBody("role", c.Role)
	return c.DoRequest("PUT")
}

type TeamsRemoveMembershipCmd struct {
	internal.BaseCmd
	TeamId   int64  `required:"" name:"team_id"`
	Username string `required:"" name:"username"`
}

func (c *TeamsRemoveMembershipCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/memberships/:username")
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLPath("username", c.Username)
	return c.DoRequest("DELETE")
}

type TeamsListPendingInvitationsCmd struct {
	internal.BaseCmd
	Dazzler bool  "name:\"dazzler-preview\" help:\"**Note:** You can now use the API to invite users to a GitHub organization. This feature is currently available for developers to preview. See the [blog post](/changes/2018-01-25-organization-invitation-api-preview) for full details. To access this feature, you must provide a custom [media type](/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.dazzler-preview+json\n\n```\""
	TeamId  int64 `required:"" name:"team_id"`
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *TeamsListPendingInvitationsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/teams/:team_id/invitations")
	c.UpdatePreview("dazzler", c.Dazzler)
	c.UpdateURLPath("team_id", c.TeamId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}
