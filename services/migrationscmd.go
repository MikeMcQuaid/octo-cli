// Code generated by go-github-cli/generator; DO NOT EDIT.

package services

type MigrationsCmd struct {
	StartForOrg                       MigrationsStartForOrgCmd                       `cmd:"" help:"Start an organization migration"`
	ListForOrg                        MigrationsListForOrgCmd                        `cmd:"" help:"Get a list of organization migrations"`
	GetStatusForOrg                   MigrationsGetStatusForOrgCmd                   `cmd:"" help:"Get the status of an organization migration"`
	GetArchiveForOrg                  MigrationsGetArchiveForOrgCmd                  `cmd:"" help:"Download an organization migration archive"`
	DeleteArchiveForOrg               MigrationsDeleteArchiveForOrgCmd               `cmd:"" help:"Delete an organization migration archive"`
	UnlockRepoForOrg                  MigrationsUnlockRepoForOrgCmd                  `cmd:"" help:"Unlock an organization repository"`
	StartImport                       MigrationsStartImportCmd                       `cmd:"" help:"Start an import"`
	GetImportProgress                 MigrationsGetImportProgressCmd                 `cmd:"" help:"Get import progress"`
	UpdateImport                      MigrationsUpdateImportCmd                      `cmd:"" help:"Update existing import"`
	GetCommitAuthors                  MigrationsGetCommitAuthorsCmd                  `cmd:"" help:"Get commit authors"`
	MapCommitAuthor                   MigrationsMapCommitAuthorCmd                   `cmd:"" help:"Map a commit author"`
	SetLfsPreference                  MigrationsSetLfsPreferenceCmd                  `cmd:"" help:"Set Git LFS preference"`
	GetLargeFiles                     MigrationsGetLargeFilesCmd                     `cmd:"" help:"Get large files"`
	CancelImport                      MigrationsCancelImportCmd                      `cmd:"" help:"Cancel an import"`
	StartForAuthenticatedUser         MigrationsStartForAuthenticatedUserCmd         `cmd:"" help:"Start a user migration"`
	ListForAuthenticatedUser          MigrationsListForAuthenticatedUserCmd          `cmd:"" help:"Get a list of user migrations"`
	GetStatusForAuthenticatedUser     MigrationsGetStatusForAuthenticatedUserCmd     `cmd:"" help:"Get the status of a user migration"`
	GetArchiveForAuthenticatedUser    MigrationsGetArchiveForAuthenticatedUserCmd    `cmd:"" help:"Download a user migration archive"`
	DeleteArchiveForAuthenticatedUser MigrationsDeleteArchiveForAuthenticatedUserCmd `cmd:"" help:"Delete a user migration archive"`
	UnlockRepoForAuthenticatedUser    MigrationsUnlockRepoForAuthenticatedUserCmd    `cmd:"" help:"Unlock a user repository"`
}

type MigrationsStartForOrgCmd struct {
	baseCmd
	Org                string   `required:"" name:"org"`
	Repositories       []string `required:"" name:"repositories" help:"A list of arrays indicating which repositories should be migrated."`
	LockRepositories   bool     `name:"lock_repositories" help:"Indicates whether repositories should be locked (to prevent manipulation) while migrating data."`
	ExcludeAttachments bool     `name:"exclude_attachments" help:"Indicates whether attachments should be excluded from the migration (to reduce migration archive file size)."`
}

func (c *MigrationsStartForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/migrations"
	c.updateURLPath("org", c.Org)
	c.updateBody("repositories", c.Repositories)
	c.updateBody("lock_repositories", c.LockRepositories)
	c.updateBody("exclude_attachments", c.ExcludeAttachments)
	return c.doRequest("POST")
}

type MigrationsListForOrgCmd struct {
	baseCmd
	Org     string `required:"" name:"org"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *MigrationsListForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/migrations"
	c.updateURLPath("org", c.Org)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type MigrationsGetStatusForOrgCmd struct {
	baseCmd
	Org         string `required:"" name:"org"`
	MigrationId int64  `required:"" name:"migration_id"`
}

func (c *MigrationsGetStatusForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/migrations/:migration_id"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("migration_id", c.MigrationId)
	return c.doRequest("GET")
}

type MigrationsGetArchiveForOrgCmd struct {
	baseCmd
	Org         string `required:"" name:"org"`
	MigrationId int64  `required:"" name:"migration_id"`
}

func (c *MigrationsGetArchiveForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/migrations/:migration_id/archive"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("migration_id", c.MigrationId)
	return c.doRequest("GET")
}

type MigrationsDeleteArchiveForOrgCmd struct {
	baseCmd
	Org         string `required:"" name:"org"`
	MigrationId int64  `required:"" name:"migration_id"`
}

func (c *MigrationsDeleteArchiveForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/migrations/:migration_id/archive"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("migration_id", c.MigrationId)
	return c.doRequest("DELETE")
}

type MigrationsUnlockRepoForOrgCmd struct {
	baseCmd
	Org         string `required:"" name:"org"`
	MigrationId int64  `required:"" name:"migration_id"`
	RepoName    string `required:"" name:"repo_name"`
}

func (c *MigrationsUnlockRepoForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/migrations/:migration_id/repos/:repo_name/lock"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("migration_id", c.MigrationId)
	c.updateURLPath("repo_name", c.RepoName)
	return c.doRequest("DELETE")
}

type MigrationsStartImportCmd struct {
	baseCmd
	Owner       string `required:"" name:"owner"`
	Repo        string `required:"" name:"repo"`
	VcsUrl      string `required:"" name:"vcs_url" help:"The URL of the originating repository."`
	Vcs         string "name:\"vcs\" help:\"The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.\""
	VcsUsername string "name:\"vcs_username\" help:\"If authentication is required, the username to provide to `vcs_url`.\""
	VcsPassword string "name:\"vcs_password\" help:\"If authentication is required, the password to provide to `vcs_url`.\""
	TfvcProject string `name:"tfvc_project" help:"For a tfvc import, the name of the project that is being imported."`
}

func (c *MigrationsStartImportCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/import"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateBody("vcs_url", c.VcsUrl)
	c.updateBody("vcs", c.Vcs)
	c.updateBody("vcs_username", c.VcsUsername)
	c.updateBody("vcs_password", c.VcsPassword)
	c.updateBody("tfvc_project", c.TfvcProject)
	return c.doRequest("PUT")
}

type MigrationsGetImportProgressCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *MigrationsGetImportProgressCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/import"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	return c.doRequest("GET")
}

type MigrationsUpdateImportCmd struct {
	baseCmd
	Owner       string `required:"" name:"owner"`
	Repo        string `required:"" name:"repo"`
	VcsUsername string `name:"vcs_username" help:"The username to provide to the originating repository."`
	VcsPassword string `name:"vcs_password" help:"The password to provide to the originating repository."`
}

func (c *MigrationsUpdateImportCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/import"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateBody("vcs_username", c.VcsUsername)
	c.updateBody("vcs_password", c.VcsPassword)
	return c.doRequest("PATCH")
}

type MigrationsGetCommitAuthorsCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
	Since string "name:\"since\" help:\"Only authors found after this id are returned. Provide the highest author ID you've seen so far. New authors may be added to the list at any point while the importer is performing the `raw` step.\""
}

func (c *MigrationsGetCommitAuthorsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/import/authors"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLQuery("since", c.Since)
	return c.doRequest("GET")
}

type MigrationsMapCommitAuthorCmd struct {
	baseCmd
	Owner    string `required:"" name:"owner"`
	Repo     string `required:"" name:"repo"`
	AuthorId int64  `required:"" name:"author_id"`
	Email    string `name:"email" help:"The new Git author email."`
	Name     string `name:"name" help:"The new Git author name."`
}

func (c *MigrationsMapCommitAuthorCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/import/authors/:author_id"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("author_id", c.AuthorId)
	c.updateBody("email", c.Email)
	c.updateBody("name", c.Name)
	return c.doRequest("PATCH")
}

type MigrationsSetLfsPreferenceCmd struct {
	baseCmd
	Owner  string `required:"" name:"owner"`
	Repo   string `required:"" name:"repo"`
	UseLfs string "required:\"\" name:\"use_lfs\" help:\"Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).\""
}

func (c *MigrationsSetLfsPreferenceCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/import/lfs"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateBody("use_lfs", c.UseLfs)
	return c.doRequest("PATCH")
}

type MigrationsGetLargeFilesCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *MigrationsGetLargeFilesCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/import/large_files"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	return c.doRequest("GET")
}

type MigrationsCancelImportCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *MigrationsCancelImportCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/import"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	return c.doRequest("DELETE")
}

type MigrationsStartForAuthenticatedUserCmd struct {
	baseCmd
	Repositories       []string `required:"" name:"repositories" help:"An array of repositories to include in the migration."`
	LockRepositories   bool     "name:\"lock_repositories\" help:\"Locks the `repositories` to prevent changes during the migration when set to `true`.\""
	ExcludeAttachments bool     "name:\"exclude_attachments\" help:\"Does not include attachments uploaded to GitHub.com in the migration data when set to `true`. Excluding attachments will reduce the migration archive file size.\""
}

func (c *MigrationsStartForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/migrations"
	c.updateBody("repositories", c.Repositories)
	c.updateBody("lock_repositories", c.LockRepositories)
	c.updateBody("exclude_attachments", c.ExcludeAttachments)
	return c.doRequest("POST")
}

type MigrationsListForAuthenticatedUserCmd struct {
	baseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *MigrationsListForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/migrations"
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type MigrationsGetStatusForAuthenticatedUserCmd struct {
	baseCmd
	MigrationId int64 `required:"" name:"migration_id"`
}

func (c *MigrationsGetStatusForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/migrations/:migration_id"
	c.updateURLPath("migration_id", c.MigrationId)
	return c.doRequest("GET")
}

type MigrationsGetArchiveForAuthenticatedUserCmd struct {
	baseCmd
	MigrationId int64 `required:"" name:"migration_id"`
}

func (c *MigrationsGetArchiveForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/migrations/:migration_id/archive"
	c.updateURLPath("migration_id", c.MigrationId)
	return c.doRequest("GET")
}

type MigrationsDeleteArchiveForAuthenticatedUserCmd struct {
	baseCmd
	MigrationId int64 `required:"" name:"migration_id"`
}

func (c *MigrationsDeleteArchiveForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/migrations/:migration_id/archive"
	c.updateURLPath("migration_id", c.MigrationId)
	return c.doRequest("DELETE")
}

type MigrationsUnlockRepoForAuthenticatedUserCmd struct {
	baseCmd
	MigrationId int64  `required:"" name:"migration_id"`
	RepoName    string `required:"" name:"repo_name"`
}

func (c *MigrationsUnlockRepoForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/migrations/:migration_id/repos/:repo_name/lock"
	c.updateURLPath("migration_id", c.MigrationId)
	c.updateURLPath("repo_name", c.RepoName)
	return c.doRequest("DELETE")
}
