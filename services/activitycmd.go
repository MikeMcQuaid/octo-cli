// Code generated by octo-cli/generator; DO NOT EDIT.

package services

type ActivityCmd struct {
	ListPublicEvents                     ActivityListPublicEventsCmd                     `cmd:"" help:"List public events"`
	ListRepoEvents                       ActivityListRepoEventsCmd                       `cmd:"" help:"List repository events"`
	ListPublicEventsForRepoNetwork       ActivityListPublicEventsForRepoNetworkCmd       `cmd:"" help:"List public events for a network of repositories"`
	ListPublicEventsForOrg               ActivityListPublicEventsForOrgCmd               `cmd:"" help:"List public events for an organization"`
	ListReceivedEventsForUser            ActivityListReceivedEventsForUserCmd            `cmd:"" help:"List events that a user has received"`
	ListReceivedPublicEventsForUser      ActivityListReceivedPublicEventsForUserCmd      `cmd:"" help:"List public events that a user has received"`
	ListEventsForUser                    ActivityListEventsForUserCmd                    `cmd:"" help:"List events performed by a user"`
	ListPublicEventsForUser              ActivityListPublicEventsForUserCmd              `cmd:"" help:"List public events performed by a user"`
	ListEventsForOrg                     ActivityListEventsForOrgCmd                     `cmd:"" help:"List events for an organization"`
	ListFeeds                            ActivityListFeedsCmd                            `cmd:"" help:"List feeds"`
	ListNotifications                    ActivityListNotificationsCmd                    `cmd:"" help:"List your notifications"`
	ListNotificationsForRepo             ActivityListNotificationsForRepoCmd             `cmd:"" help:"List your notifications in a repository"`
	MarkAsRead                           ActivityMarkAsReadCmd                           `cmd:"" help:"Mark as read"`
	MarkNotificationsAsReadForRepo       ActivityMarkNotificationsAsReadForRepoCmd       `cmd:"" help:"Mark notifications as read in a repository"`
	GetThread                            ActivityGetThreadCmd                            `cmd:"" help:"View a single thread"`
	MarkThreadAsRead                     ActivityMarkThreadAsReadCmd                     `cmd:"" help:"Mark a thread as read"`
	GetThreadSubscription                ActivityGetThreadSubscriptionCmd                `cmd:"" help:"Get a thread subscription"`
	SetThreadSubscription                ActivitySetThreadSubscriptionCmd                `cmd:"" help:"Set a thread subscription"`
	DeleteThreadSubscription             ActivityDeleteThreadSubscriptionCmd             `cmd:"" help:"Delete a thread subscription"`
	ListStargazersForRepo                ActivityListStargazersForRepoCmd                `cmd:"" help:"List Stargazers"`
	ListReposStarredByUser               ActivityListReposStarredByUserCmd               `cmd:"" help:"List repositories being starred by a user"`
	ListReposStarredByAuthenticatedUser  ActivityListReposStarredByAuthenticatedUserCmd  `cmd:"" help:"List repositories being starred by the authenticated user"`
	CheckStarringRepo                    ActivityCheckStarringRepoCmd                    `cmd:"" help:"Check if you are starring a repository"`
	StarRepo                             ActivityStarRepoCmd                             `cmd:"" help:"Star a repository"`
	UnstarRepo                           ActivityUnstarRepoCmd                           `cmd:"" help:"Unstar a repository"`
	ListWatchersForRepo                  ActivityListWatchersForRepoCmd                  `cmd:"" help:"List watchers"`
	ListReposWatchedByUser               ActivityListReposWatchedByUserCmd               `cmd:"" help:"List repositories being watched by a user"`
	ListWatchedReposForAuthenticatedUser ActivityListWatchedReposForAuthenticatedUserCmd `cmd:"" help:"List repositories being watched by the authenticated user"`
	GetRepoSubscription                  ActivityGetRepoSubscriptionCmd                  `cmd:"" help:"Get a Repository Subscription"`
	SetRepoSubscription                  ActivitySetRepoSubscriptionCmd                  `cmd:"" help:"Set a Repository Subscription"`
	DeleteRepoSubscription               ActivityDeleteRepoSubscriptionCmd               `cmd:"" help:"Delete a Repository Subscription"`
	CheckWatchingRepoLegacy              ActivityCheckWatchingRepoLegacyCmd              `cmd:"" help:"Check if you are watching a repository (LEGACY)"`
	WatchRepoLegacy                      ActivityWatchRepoLegacyCmd                      `cmd:"" help:"Watch a repository (LEGACY)"`
	StopWatchingRepoLegacy               ActivityStopWatchingRepoLegacyCmd               `cmd:"" help:"Stop watching a repository (LEGACY)"`
}

type ActivityListPublicEventsCmd struct {
	baseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListPublicEventsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/events"
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListRepoEventsCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListRepoEventsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/events"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListPublicEventsForRepoNetworkCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListPublicEventsForRepoNetworkCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/networks/:owner/:repo/events"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListPublicEventsForOrgCmd struct {
	baseCmd
	Org     string `required:"" name:"org"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListPublicEventsForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/events"
	c.updateURLPath("org", c.Org)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListReceivedEventsForUserCmd struct {
	baseCmd
	Username string `required:"" name:"username"`
	PerPage  int64  `name:"per_page" help:"Results per page (max 100)"`
	Page     int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListReceivedEventsForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/users/:username/received_events"
	c.updateURLPath("username", c.Username)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListReceivedPublicEventsForUserCmd struct {
	baseCmd
	Username string `required:"" name:"username"`
	PerPage  int64  `name:"per_page" help:"Results per page (max 100)"`
	Page     int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListReceivedPublicEventsForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/users/:username/received_events/public"
	c.updateURLPath("username", c.Username)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListEventsForUserCmd struct {
	baseCmd
	Username string `required:"" name:"username"`
	PerPage  int64  `name:"per_page" help:"Results per page (max 100)"`
	Page     int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListEventsForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/users/:username/events"
	c.updateURLPath("username", c.Username)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListPublicEventsForUserCmd struct {
	baseCmd
	Username string `required:"" name:"username"`
	PerPage  int64  `name:"per_page" help:"Results per page (max 100)"`
	Page     int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListPublicEventsForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/users/:username/events/public"
	c.updateURLPath("username", c.Username)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListEventsForOrgCmd struct {
	baseCmd
	Username string `required:"" name:"username"`
	Org      string `required:"" name:"org"`
	PerPage  int64  `name:"per_page" help:"Results per page (max 100)"`
	Page     int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListEventsForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/users/:username/events/orgs/:org"
	c.updateURLPath("username", c.Username)
	c.updateURLPath("org", c.Org)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListFeedsCmd struct {
	baseCmd
}

func (c *ActivityListFeedsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/feeds"
	return c.doRequest("GET")
}

type ActivityListNotificationsCmd struct {
	baseCmd
	All           bool   "name:\"all\" help:\"If `true`, show notifications marked as read.\""
	Participating bool   "name:\"participating\" help:\"If `true`, only shows notifications in which the user is directly participating or mentioned.\""
	Since         string "name:\"since\" help:\"Only show notifications updated after the given time. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
	Before        string "name:\"before\" help:\"Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
	PerPage       int64  `name:"per_page" help:"Results per page (max 100)"`
	Page          int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListNotificationsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/notifications"
	c.updateURLQuery("all", c.All)
	c.updateURLQuery("participating", c.Participating)
	c.updateURLQuery("since", c.Since)
	c.updateURLQuery("before", c.Before)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListNotificationsForRepoCmd struct {
	baseCmd
	Owner         string `required:"" name:"owner"`
	Repo          string `required:"" name:"repo"`
	All           bool   "name:\"all\" help:\"If `true`, show notifications marked as read.\""
	Participating bool   "name:\"participating\" help:\"If `true`, only shows notifications in which the user is directly participating or mentioned.\""
	Since         string "name:\"since\" help:\"Only show notifications updated after the given time. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
	Before        string "name:\"before\" help:\"Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
	PerPage       int64  `name:"per_page" help:"Results per page (max 100)"`
	Page          int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListNotificationsForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/notifications"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLQuery("all", c.All)
	c.updateURLQuery("participating", c.Participating)
	c.updateURLQuery("since", c.Since)
	c.updateURLQuery("before", c.Before)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityMarkAsReadCmd struct {
	baseCmd
	LastReadAt string "name:\"last_read_at\" help:\"Describes the last point that notifications were checked. Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
}

func (c *ActivityMarkAsReadCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/notifications"
	c.updateBody("last_read_at", c.LastReadAt)
	return c.doRequest("PUT")
}

type ActivityMarkNotificationsAsReadForRepoCmd struct {
	baseCmd
	Owner      string `required:"" name:"owner"`
	Repo       string `required:"" name:"repo"`
	LastReadAt string "name:\"last_read_at\" help:\"Describes the last point that notifications were checked. Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
}

func (c *ActivityMarkNotificationsAsReadForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/notifications"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateBody("last_read_at", c.LastReadAt)
	return c.doRequest("PUT")
}

type ActivityGetThreadCmd struct {
	baseCmd
	ThreadId int64 `required:"" name:"thread_id"`
}

func (c *ActivityGetThreadCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/notifications/threads/:thread_id"
	c.updateURLPath("thread_id", c.ThreadId)
	return c.doRequest("GET")
}

type ActivityMarkThreadAsReadCmd struct {
	baseCmd
	ThreadId int64 `required:"" name:"thread_id"`
}

func (c *ActivityMarkThreadAsReadCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/notifications/threads/:thread_id"
	c.updateURLPath("thread_id", c.ThreadId)
	return c.doRequest("PATCH")
}

type ActivityGetThreadSubscriptionCmd struct {
	baseCmd
	ThreadId int64 `required:"" name:"thread_id"`
}

func (c *ActivityGetThreadSubscriptionCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/notifications/threads/:thread_id/subscription"
	c.updateURLPath("thread_id", c.ThreadId)
	return c.doRequest("GET")
}

type ActivitySetThreadSubscriptionCmd struct {
	baseCmd
	ThreadId int64 `required:"" name:"thread_id"`
	Ignored  bool  "name:\"ignored\" help:\"Unsubscribes and subscribes you to a conversation. Set `ignored` to `true` to block all notifications from this thread.\""
}

func (c *ActivitySetThreadSubscriptionCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/notifications/threads/:thread_id/subscription"
	c.updateURLPath("thread_id", c.ThreadId)
	c.updateBody("ignored", c.Ignored)
	return c.doRequest("PUT")
}

type ActivityDeleteThreadSubscriptionCmd struct {
	baseCmd
	ThreadId int64 `required:"" name:"thread_id"`
}

func (c *ActivityDeleteThreadSubscriptionCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/notifications/threads/:thread_id/subscription"
	c.updateURLPath("thread_id", c.ThreadId)
	return c.doRequest("DELETE")
}

type ActivityListStargazersForRepoCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListStargazersForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/stargazers"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListReposStarredByUserCmd struct {
	baseCmd
	Username  string `required:"" name:"username"`
	Sort      string "name:\"sort\" help:\"One of `created` (when the repository was starred) or `updated` (when it was last pushed to).\""
	Direction string "name:\"direction\" help:\"One of `asc` (ascending) or `desc` (descending).\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListReposStarredByUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/users/:username/starred"
	c.updateURLPath("username", c.Username)
	c.updateURLQuery("sort", c.Sort)
	c.updateURLQuery("direction", c.Direction)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListReposStarredByAuthenticatedUserCmd struct {
	baseCmd
	Sort      string "name:\"sort\" help:\"One of `created` (when the repository was starred) or `updated` (when it was last pushed to).\""
	Direction string "name:\"direction\" help:\"One of `asc` (ascending) or `desc` (descending).\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListReposStarredByAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/starred"
	c.updateURLQuery("sort", c.Sort)
	c.updateURLQuery("direction", c.Direction)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityCheckStarringRepoCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityCheckStarringRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/starred/:owner/:repo"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	return c.doRequest("GET")
}

type ActivityStarRepoCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityStarRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/starred/:owner/:repo"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	return c.doRequest("PUT")
}

type ActivityUnstarRepoCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityUnstarRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/starred/:owner/:repo"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	return c.doRequest("DELETE")
}

type ActivityListWatchersForRepoCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListWatchersForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/subscribers"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListReposWatchedByUserCmd struct {
	baseCmd
	Username string `required:"" name:"username"`
	PerPage  int64  `name:"per_page" help:"Results per page (max 100)"`
	Page     int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListReposWatchedByUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/users/:username/subscriptions"
	c.updateURLPath("username", c.Username)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityListWatchedReposForAuthenticatedUserCmd struct {
	baseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *ActivityListWatchedReposForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/subscriptions"
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ActivityGetRepoSubscriptionCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityGetRepoSubscriptionCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/subscription"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	return c.doRequest("GET")
}

type ActivitySetRepoSubscriptionCmd struct {
	baseCmd
	Owner      string `required:"" name:"owner"`
	Repo       string `required:"" name:"repo"`
	Subscribed bool   `name:"subscribed" help:"Determines if notifications should be received from this repository."`
	Ignored    bool   `name:"ignored" help:"Determines if all notifications should be blocked from this repository."`
}

func (c *ActivitySetRepoSubscriptionCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/subscription"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateBody("subscribed", c.Subscribed)
	c.updateBody("ignored", c.Ignored)
	return c.doRequest("PUT")
}

type ActivityDeleteRepoSubscriptionCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityDeleteRepoSubscriptionCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/subscription"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	return c.doRequest("DELETE")
}

type ActivityCheckWatchingRepoLegacyCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityCheckWatchingRepoLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/subscriptions/:owner/:repo"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	return c.doRequest("GET")
}

type ActivityWatchRepoLegacyCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityWatchRepoLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/subscriptions/:owner/:repo"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	return c.doRequest("PUT")
}

type ActivityStopWatchingRepoLegacyCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *ActivityStopWatchingRepoLegacyCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/subscriptions/:owner/:repo"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	return c.doRequest("DELETE")
}
