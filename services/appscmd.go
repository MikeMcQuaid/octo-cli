// Code generated by go-github-cli/generator; DO NOT EDIT

package services

type AppsCmd struct {
	GetBySlug                                           AppsGetBySlugCmd                                           `cmd:"" help:"Get a single GitHub App"`
	GetAuthenticated                                    AppsGetAuthenticatedCmd                                    `cmd:"" help:"Get the authenticated GitHub App"`
	ListInstallations                                   AppsListInstallationsCmd                                   `cmd:"" help:"Find installations"`
	GetInstallation                                     AppsGetInstallationCmd                                     `cmd:"" help:"Get a single installation"`
	ListInstallationsForAuthenticatedUser               AppsListInstallationsForAuthenticatedUserCmd               `cmd:"" help:"List installations for user"`
	CreateInstallationToken                             AppsCreateInstallationTokenCmd                             `cmd:"" help:"Create a new installation token"`
	FindOrgInstallation                                 AppsFindOrgInstallationCmd                                 `cmd:"" help:"Find organization installation"`
	FindRepoInstallation                                AppsFindRepoInstallationCmd                                `cmd:"" help:"Find repository installation"`
	FindUserInstallation                                AppsFindUserInstallationCmd                                `cmd:"" help:"Find user installation"`
	CreateFromManifest                                  AppsCreateFromManifestCmd                                  `cmd:"" help:"Create a GitHub App from a manifest"`
	ListRepos                                           AppsListReposCmd                                           `cmd:"" help:"List repositories"`
	ListInstallationReposForAuthenticatedUser           AppsListInstallationReposForAuthenticatedUserCmd           `cmd:"" help:"List repositories accessible to the user for an installation"`
	AddRepoToInstallation                               AppsAddRepoToInstallationCmd                               `cmd:"" help:"Add repository to installation"`
	RemoveRepoFromInstallation                          AppsRemoveRepoFromInstallationCmd                          `cmd:"" help:"Remove repository from installation"`
	ListPlans                                           AppsListPlansCmd                                           `cmd:"" help:"List all plans for your Marketplace listing"`
	ListPlansStubbed                                    AppsListPlansStubbedCmd                                    `cmd:"" help:"List all plans for your Marketplace listing (stubbed)"`
	ListAccountsUserOrOrgOnPlan                         AppsListAccountsUserOrOrgOnPlanCmd                         `cmd:"" help:"List all GitHub accounts (user or organization) on a specific plan"`
	ListAccountsUserOrOrgOnPlanStubbed                  AppsListAccountsUserOrOrgOnPlanStubbedCmd                  `cmd:"" help:"List all GitHub accounts (user or organization) on a specific plan (stubbed)"`
	CheckAccountIsAssociatedWithAny                     AppsCheckAccountIsAssociatedWithAnyCmd                     `cmd:"" help:"Check if a GitHub account is associated with any Marketplace listing"`
	CheckAccountIsAssociatedWithAnyStubbed              AppsCheckAccountIsAssociatedWithAnyStubbedCmd              `cmd:"" help:"Check if a GitHub account is associated with any Marketplace listing (stubbed)"`
	ListMarketplacePurchasesForAuthenticatedUser        AppsListMarketplacePurchasesForAuthenticatedUserCmd        `cmd:"" help:"Get a user's Marketplace purchases"`
	ListMarketplacePurchasesForAuthenticatedUserStubbed AppsListMarketplacePurchasesForAuthenticatedUserStubbedCmd `cmd:"" help:"Get a user's Marketplace purchases (stubbed)"`
}

type AppsGetBySlugCmd struct {
	baseCmd
	AppSlug string `required:"" name:"app_slug"`
}

func (c *AppsGetBySlugCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/apps/:app_slug"
	c.updateURLPath("app_slug", c.AppSlug)
	return c.doRequest("GET")
}

type AppsGetAuthenticatedCmd struct {
	baseCmd
}

func (c *AppsGetAuthenticatedCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/app"
	return c.doRequest("GET")
}

type AppsListInstallationsCmd struct {
	baseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListInstallationsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/app/installations"
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type AppsGetInstallationCmd struct {
	baseCmd
	InstallationId int64 `required:"" name:"installation_id"`
}

func (c *AppsGetInstallationCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/app/installations/:installation_id"
	c.updateURLPath("installation_id", c.InstallationId)
	return c.doRequest("GET")
}

type AppsListInstallationsForAuthenticatedUserCmd struct {
	baseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListInstallationsForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/installations"
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type AppsCreateInstallationTokenCmd struct {
	baseCmd
	InstallationId int64 `required:"" name:"installation_id"`
}

func (c *AppsCreateInstallationTokenCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/app/installations/:installation_id/access_tokens"
	c.updateURLPath("installation_id", c.InstallationId)
	return c.doRequest("POST")
}

type AppsFindOrgInstallationCmd struct {
	baseCmd
	Org string `required:"" name:"org"`
}

func (c *AppsFindOrgInstallationCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/installation"
	c.updateURLPath("org", c.Org)
	return c.doRequest("GET")
}

type AppsFindRepoInstallationCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
}

func (c *AppsFindRepoInstallationCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/installation"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	return c.doRequest("GET")
}

type AppsFindUserInstallationCmd struct {
	baseCmd
	Username string `required:"" name:"username"`
}

func (c *AppsFindUserInstallationCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/users/:username/installation"
	c.updateURLPath("username", c.Username)
	return c.doRequest("GET")
}

type AppsCreateFromManifestCmd struct {
	baseCmd
	Code string `required:"" name:"code"`
}

func (c *AppsCreateFromManifestCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/app-manifests/:code/conversions"
	c.updateURLPath("code", c.Code)
	return c.doRequest("POST")
}

type AppsListReposCmd struct {
	baseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListReposCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/installation/repositories"
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type AppsListInstallationReposForAuthenticatedUserCmd struct {
	baseCmd
	InstallationId int64 `required:"" name:"installation_id"`
	PerPage        int64 `name:"per_page" help:"Results per page (max 100)"`
	Page           int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListInstallationReposForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/installations/:installation_id/repositories"
	c.updateURLPath("installation_id", c.InstallationId)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type AppsAddRepoToInstallationCmd struct {
	baseCmd
	InstallationId int64 `required:"" name:"installation_id"`
	RepositoryId   int64 `required:"" name:"repository_id"`
}

func (c *AppsAddRepoToInstallationCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/installations/:installation_id/repositories/:repository_id"
	c.updateURLPath("installation_id", c.InstallationId)
	c.updateURLPath("repository_id", c.RepositoryId)
	return c.doRequest("PUT")
}

type AppsRemoveRepoFromInstallationCmd struct {
	baseCmd
	InstallationId int64 `required:"" name:"installation_id"`
	RepositoryId   int64 `required:"" name:"repository_id"`
}

func (c *AppsRemoveRepoFromInstallationCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/installations/:installation_id/repositories/:repository_id"
	c.updateURLPath("installation_id", c.InstallationId)
	c.updateURLPath("repository_id", c.RepositoryId)
	return c.doRequest("DELETE")
}

type AppsListPlansCmd struct {
	baseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListPlansCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/marketplace_listing/plans"
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type AppsListPlansStubbedCmd struct {
	baseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListPlansStubbedCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/marketplace_listing/stubbed/plans"
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type AppsListAccountsUserOrOrgOnPlanCmd struct {
	baseCmd
	PlanId    int64  `required:"" name:"plan_id"`
	Sort      string "name:\"sort\" help:\"Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.\""
	Direction string "name:\"direction\" help:\"To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListAccountsUserOrOrgOnPlanCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/marketplace_listing/plans/:plan_id/accounts"
	c.updateURLPath("plan_id", c.PlanId)
	c.updateURLQuery("sort", c.Sort)
	c.updateURLQuery("direction", c.Direction)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type AppsListAccountsUserOrOrgOnPlanStubbedCmd struct {
	baseCmd
	PlanId    int64  `required:"" name:"plan_id"`
	Sort      string "name:\"sort\" help:\"Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.\""
	Direction string "name:\"direction\" help:\"To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListAccountsUserOrOrgOnPlanStubbedCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/marketplace_listing/stubbed/plans/:plan_id/accounts"
	c.updateURLPath("plan_id", c.PlanId)
	c.updateURLQuery("sort", c.Sort)
	c.updateURLQuery("direction", c.Direction)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type AppsCheckAccountIsAssociatedWithAnyCmd struct {
	baseCmd
	AccountId int64 `required:"" name:"account_id"`
	PerPage   int64 `name:"per_page" help:"Results per page (max 100)"`
	Page      int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsCheckAccountIsAssociatedWithAnyCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/marketplace_listing/accounts/:account_id"
	c.updateURLPath("account_id", c.AccountId)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type AppsCheckAccountIsAssociatedWithAnyStubbedCmd struct {
	baseCmd
	AccountId int64 `required:"" name:"account_id"`
	PerPage   int64 `name:"per_page" help:"Results per page (max 100)"`
	Page      int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsCheckAccountIsAssociatedWithAnyStubbedCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/marketplace_listing/stubbed/accounts/:account_id"
	c.updateURLPath("account_id", c.AccountId)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type AppsListMarketplacePurchasesForAuthenticatedUserCmd struct {
	baseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListMarketplacePurchasesForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/marketplace_purchases"
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type AppsListMarketplacePurchasesForAuthenticatedUserStubbedCmd struct {
	baseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *AppsListMarketplacePurchasesForAuthenticatedUserStubbedCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/marketplace_purchases/stubbed"
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}
