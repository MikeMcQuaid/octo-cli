// Code generated by go-github-cli/generator DO NOT EDIT
package repositoriessvc

import (
	"context"
	"encoding/json"
	"net/http"
	"net/url"
	"strings"

	"github.com/alecthomas/kong"
	"github.com/google/go-github/github"
	"golang.org/x/oauth2"
)

var transportWrapper interface {
	SetTransport(t http.RoundTripper)
	http.RoundTripper
}

func buildGithubClient(ctx context.Context, token, apiBaseURL string) (*github.Client, error) {
	apiBaseURL = strings.TrimSuffix(apiBaseURL, "/") + "/"
	ts := oauth2.StaticTokenSource(&oauth2.Token{AccessToken: token})
	tc := oauth2.NewClient(ctx, ts)
	if transportWrapper != nil {
		transportWrapper.SetTransport(tc.Transport)
		tc.Transport = transportWrapper
	}
	client := github.NewClient(tc)
	baseURL, err := url.Parse(apiBaseURL)
	client.BaseURL = baseURL
	return client, err
}

type RepositoriesCmd struct {
	Get RepositoriesGetCmd `cmd:"" help:"Get"`
}

type RepositoriesGetCmd struct {
	Token      string `env:"GITHUB_TOKEN" required:""`
	APIBaseURL string `env:"GITHUB_API_BASE_URL" default:"https://api.github.com"`
	Owner      string `required:""`
	Repo       string `required:""`
}

func (c *RepositoriesGetCmd) Run(k *kong.Context) error {
	ctx := context.Background()
	client, e := buildGithubClient(ctx, c.Token, c.APIBaseURL)
	if e != nil {
		return e
	}
	element, _, err := client.Repositories.Get(ctx, c.Owner, c.Repo)
	if err != nil {
		return err
	}
	return json.NewEncoder(k.Stdout).Encode(element)
}
