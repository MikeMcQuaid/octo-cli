// Code generated by go-github-cli/generator; DO NOT EDIT

package services

type ChecksCmd struct {
	ListForRef       ChecksListForRefCmd       `cmd:"" help:"List check runs for a specific ref"`
	ListForSuite     ChecksListForSuiteCmd     `cmd:"" help:"List check runs in a check suite"`
	Get              ChecksGetCmd              `cmd:"" help:"Get a single check run"`
	ListAnnotations  ChecksListAnnotationsCmd  `cmd:"" help:"List annotations for a check run"`
	GetSuite         ChecksGetSuiteCmd         `cmd:"" help:"Get a single check suite"`
	ListSuitesForRef ChecksListSuitesForRefCmd `cmd:"" help:"List check suites for a specific ref"`
	CreateSuite      ChecksCreateSuiteCmd      `cmd:"" help:"Create a check suite"`
	RerequestSuite   ChecksRerequestSuiteCmd   `cmd:"" help:"Rerequest check suite"`
}

type ChecksListForRefCmd struct {
	baseCmd
	Owner     string `required:"" name:"owner"`
	Repo      string `required:"" name:"repo"`
	Ref       string `required:"" name:"ref"`
	CheckName string "name:\"check_name\" help:\"Returns check runs with the specified `name`.\""
	Status    string "name:\"status\" help:\"Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.\""
	Filter    string "name:\"filter\" help:\"Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ChecksListForRefCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/commits/:ref/check-runs"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("ref", c.Ref)
	c.updateURLQuery("check_name", c.CheckName)
	c.updateURLQuery("status", c.Status)
	c.updateURLQuery("filter", c.Filter)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ChecksListForSuiteCmd struct {
	baseCmd
	Owner        string `required:"" name:"owner"`
	Repo         string `required:"" name:"repo"`
	CheckSuiteId int64  `required:"" name:"check_suite_id"`
	CheckName    string "name:\"check_name\" help:\"Returns check runs with the specified `name`.\""
	Status       string "name:\"status\" help:\"Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.\""
	Filter       string "name:\"filter\" help:\"Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.\""
	PerPage      int64  `name:"per_page" help:"Results per page (max 100)"`
	Page         int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ChecksListForSuiteCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/check-suites/:check_suite_id/check-runs"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("check_suite_id", c.CheckSuiteId)
	c.updateURLQuery("check_name", c.CheckName)
	c.updateURLQuery("status", c.Status)
	c.updateURLQuery("filter", c.Filter)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ChecksGetCmd struct {
	baseCmd
	Owner      string `required:"" name:"owner"`
	Repo       string `required:"" name:"repo"`
	CheckRunId int64  `required:"" name:"check_run_id"`
}

func (c *ChecksGetCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/check-runs/:check_run_id"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("check_run_id", c.CheckRunId)
	return c.doRequest("GET")
}

type ChecksListAnnotationsCmd struct {
	baseCmd
	Owner      string `required:"" name:"owner"`
	Repo       string `required:"" name:"repo"`
	CheckRunId int64  `required:"" name:"check_run_id"`
	PerPage    int64  `name:"per_page" help:"Results per page (max 100)"`
	Page       int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ChecksListAnnotationsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/check-runs/:check_run_id/annotations"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("check_run_id", c.CheckRunId)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ChecksGetSuiteCmd struct {
	baseCmd
	Owner        string `required:"" name:"owner"`
	Repo         string `required:"" name:"repo"`
	CheckSuiteId int64  `required:"" name:"check_suite_id"`
}

func (c *ChecksGetSuiteCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/check-suites/:check_suite_id"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("check_suite_id", c.CheckSuiteId)
	return c.doRequest("GET")
}

type ChecksListSuitesForRefCmd struct {
	baseCmd
	Owner     string `required:"" name:"owner"`
	Repo      string `required:"" name:"repo"`
	Ref       string `required:"" name:"ref"`
	AppId     int64  "name:\"app_id\" help:\"Filters check suites by GitHub App `id`.\""
	CheckName string `name:"check_name" help:"Filters checks suites by the name of the [check run](https://developer.github.com/v3/checks/runs/)."`
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *ChecksListSuitesForRefCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/commits/:ref/check-suites"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("ref", c.Ref)
	c.updateURLQuery("app_id", c.AppId)
	c.updateURLQuery("check_name", c.CheckName)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type ChecksCreateSuiteCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	HeadSha string `required:"" name:"head_sha" help:"The sha of the head commit."`
}

func (c *ChecksCreateSuiteCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/check-suites"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateBody("head_sha", c.HeadSha)
	return c.doRequest("POST")
}

type ChecksRerequestSuiteCmd struct {
	baseCmd
	Owner        string `required:"" name:"owner"`
	Repo         string `required:"" name:"repo"`
	CheckSuiteId int64  `required:"" name:"check_suite_id"`
}

func (c *ChecksRerequestSuiteCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/check-suites/:check_suite_id/rerequest"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("check_suite_id", c.CheckSuiteId)
	return c.doRequest("POST")
}
