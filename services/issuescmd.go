// Code generated by go-github-cli/generator; DO NOT EDIT.

package services

type IssuesCmd struct {
	List                     IssuesListCmd                     `cmd:"" help:"List all issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories"`
	ListForAuthenticatedUser IssuesListForAuthenticatedUserCmd `cmd:"" help:"List all issues across owned and member repositories assigned to the authenticated user"`
	ListForOrg               IssuesListForOrgCmd               `cmd:"" help:"List all issues for a given organization assigned to the authenticated user"`
	ListForRepo              IssuesListForRepoCmd              `cmd:"" help:"List issues for a repository"`
	Get                      IssuesGetCmd                      `cmd:"" help:"Get a single issue"`
	Create                   IssuesCreateCmd                   `cmd:"" help:"Create an issue"`
	Edit                     IssuesEditCmd                     `cmd:"" help:"Edit an issue"`
	Lock                     IssuesLockCmd                     `cmd:"" help:"Lock an issue"`
	Unlock                   IssuesUnlockCmd                   `cmd:"" help:"Unlock an issue"`
	ListAssignees            IssuesListAssigneesCmd            `cmd:"" help:"List assignees"`
	CheckAssignee            IssuesCheckAssigneeCmd            `cmd:"" help:"Check assignee"`
	AddAssignees             IssuesAddAssigneesCmd             `cmd:"" help:"Add assignees to an issue"`
	RemoveAssignees          IssuesRemoveAssigneesCmd          `cmd:"" help:"Remove assignees from an issue"`
	ListComments             IssuesListCommentsCmd             `cmd:"" help:"List comments on an issue"`
	ListCommentsForRepo      IssuesListCommentsForRepoCmd      `cmd:"" help:"List comments in a repository"`
	GetComment               IssuesGetCommentCmd               `cmd:"" help:"Get a single comment"`
	CreateComment            IssuesCreateCommentCmd            `cmd:"" help:"Create a comment"`
	EditComment              IssuesEditCommentCmd              `cmd:"" help:"Edit a comment"`
	DeleteComment            IssuesDeleteCommentCmd            `cmd:"" help:"Delete a comment"`
	ListEvents               IssuesListEventsCmd               `cmd:"" help:"List events for an issue"`
	ListEventsForRepo        IssuesListEventsForRepoCmd        `cmd:"" help:"List events for a repository"`
	GetEvent                 IssuesGetEventCmd                 `cmd:"" help:"Get a single event"`
	ListLabelsForRepo        IssuesListLabelsForRepoCmd        `cmd:"" help:"List all labels for this repository"`
	GetLabel                 IssuesGetLabelCmd                 `cmd:"" help:"Get a single label"`
	CreateLabel              IssuesCreateLabelCmd              `cmd:"" help:"Create a label"`
	UpdateLabel              IssuesUpdateLabelCmd              `cmd:"" help:"Update a label"`
	DeleteLabel              IssuesDeleteLabelCmd              `cmd:"" help:"Delete a label"`
	ListLabelsOnIssue        IssuesListLabelsOnIssueCmd        `cmd:"" help:"List labels on an issue"`
	AddLabels                IssuesAddLabelsCmd                `cmd:"" help:"Add labels to an issue"`
	RemoveLabel              IssuesRemoveLabelCmd              `cmd:"" help:"Remove a label from an issue"`
	ReplaceLabels            IssuesReplaceLabelsCmd            `cmd:"" help:"Replace all labels for an issue"`
	RemoveLabels             IssuesRemoveLabelsCmd             `cmd:"" help:"Remove all labels from an issue"`
	ListLabelsForMilestone   IssuesListLabelsForMilestoneCmd   `cmd:"" help:"Get labels for every issue in a milestone"`
	ListMilestonesForRepo    IssuesListMilestonesForRepoCmd    `cmd:"" help:"List milestones for a repository"`
	GetMilestone             IssuesGetMilestoneCmd             `cmd:"" help:"Get a single milestone"`
	CreateMilestone          IssuesCreateMilestoneCmd          `cmd:"" help:"Create a milestone"`
	UpdateMilestone          IssuesUpdateMilestoneCmd          `cmd:"" help:"Update a milestone"`
	DeleteMilestone          IssuesDeleteMilestoneCmd          `cmd:"" help:"Delete a milestone"`
	ListEventsForTimeline    IssuesListEventsForTimelineCmd    `cmd:"" help:"List events for an issue"`
}

type IssuesListCmd struct {
	baseCmd
	Filter    string "name:\"filter\" help:\"Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation\""
	State     string "name:\"state\" help:\"Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.\""
	Labels    string "name:\"labels\" help:\"A list of comma separated label names. Example: `bug,ui,@high`\""
	Sort      string "name:\"sort\" help:\"What to sort results by. Can be either `created`, `updated`, `comments`.\""
	Direction string "name:\"direction\" help:\"The direction of the sort. Can be either `asc` or `desc`.\""
	Since     string "name:\"since\" help:\"Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/issues"
	c.updateURLQuery("filter", c.Filter)
	c.updateURLQuery("state", c.State)
	c.updateURLQuery("labels", c.Labels)
	c.updateURLQuery("sort", c.Sort)
	c.updateURLQuery("direction", c.Direction)
	c.updateURLQuery("since", c.Since)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesListForAuthenticatedUserCmd struct {
	baseCmd
	Filter    string "name:\"filter\" help:\"Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation\""
	State     string "name:\"state\" help:\"Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.\""
	Labels    string "name:\"labels\" help:\"A list of comma separated label names. Example: `bug,ui,@high`\""
	Sort      string "name:\"sort\" help:\"What to sort results by. Can be either `created`, `updated`, `comments`.\""
	Direction string "name:\"direction\" help:\"The direction of the sort. Can be either `asc` or `desc`.\""
	Since     string "name:\"since\" help:\"Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListForAuthenticatedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/issues"
	c.updateURLQuery("filter", c.Filter)
	c.updateURLQuery("state", c.State)
	c.updateURLQuery("labels", c.Labels)
	c.updateURLQuery("sort", c.Sort)
	c.updateURLQuery("direction", c.Direction)
	c.updateURLQuery("since", c.Since)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesListForOrgCmd struct {
	baseCmd
	Org       string `required:"" name:"org"`
	Filter    string "name:\"filter\" help:\"Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation\""
	State     string "name:\"state\" help:\"Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.\""
	Labels    string "name:\"labels\" help:\"A list of comma separated label names. Example: `bug,ui,@high`\""
	Sort      string "name:\"sort\" help:\"What to sort results by. Can be either `created`, `updated`, `comments`.\""
	Direction string "name:\"direction\" help:\"The direction of the sort. Can be either `asc` or `desc`.\""
	Since     string "name:\"since\" help:\"Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/issues"
	c.updateURLPath("org", c.Org)
	c.updateURLQuery("filter", c.Filter)
	c.updateURLQuery("state", c.State)
	c.updateURLQuery("labels", c.Labels)
	c.updateURLQuery("sort", c.Sort)
	c.updateURLQuery("direction", c.Direction)
	c.updateURLQuery("since", c.Since)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesListForRepoCmd struct {
	baseCmd
	Owner     string `required:"" name:"owner"`
	Repo      string `required:"" name:"repo"`
	Milestone string "name:\"milestone\" help:\"If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.\""
	State     string "name:\"state\" help:\"Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.\""
	Assignee  string "name:\"assignee\" help:\"Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.\""
	Creator   string `name:"creator" help:"The user that created the issue."`
	Mentioned string `name:"mentioned" help:"A user that's mentioned in the issue."`
	Labels    string "name:\"labels\" help:\"A list of comma separated label names. Example: `bug,ui,@high`\""
	Sort      string "name:\"sort\" help:\"What to sort results by. Can be either `created`, `updated`, `comments`.\""
	Direction string "name:\"direction\" help:\"The direction of the sort. Can be either `asc` or `desc`.\""
	Since     string "name:\"since\" help:\"Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLQuery("milestone", c.Milestone)
	c.updateURLQuery("state", c.State)
	c.updateURLQuery("assignee", c.Assignee)
	c.updateURLQuery("creator", c.Creator)
	c.updateURLQuery("mentioned", c.Mentioned)
	c.updateURLQuery("labels", c.Labels)
	c.updateURLQuery("sort", c.Sort)
	c.updateURLQuery("direction", c.Direction)
	c.updateURLQuery("since", c.Since)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesGetCmd struct {
	baseCmd
	Owner  string `required:"" name:"owner"`
	Repo   string `required:"" name:"repo"`
	Number int64  `required:"" name:"number"`
}

func (c *IssuesGetCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	return c.doRequest("GET")
}

type IssuesCreateCmd struct {
	baseCmd
	Owner     string   `required:"" name:"owner"`
	Repo      string   `required:"" name:"repo"`
	Title     string   `required:"" name:"title" help:"The title of the issue."`
	Body      string   `name:"body" help:"The contents of the issue."`
	Assignee  string   `name:"assignee" help:"Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_"`
	Milestone int64    "name:\"milestone\" help:\"The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._\""
	Labels    []string `name:"labels" help:"Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._"`
	Assignees []string `name:"assignees" help:"Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._"`
}

func (c *IssuesCreateCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateBody("title", c.Title)
	c.updateBody("body", c.Body)
	c.updateBody("assignee", c.Assignee)
	c.updateBody("milestone", c.Milestone)
	c.updateBody("labels", c.Labels)
	c.updateBody("assignees", c.Assignees)
	return c.doRequest("POST")
}

type IssuesEditCmd struct {
	baseCmd
	Owner     string   `required:"" name:"owner"`
	Repo      string   `required:"" name:"repo"`
	Number    int64    `required:"" name:"number"`
	Title     string   `name:"title" help:"The title of the issue."`
	Body      string   `name:"body" help:"The contents of the issue."`
	Assignee  string   `name:"assignee" help:"Login for the user that this issue should be assigned to. **This field is deprecated.**"`
	State     string   "name:\"state\" help:\"State of the issue. Either `open` or `closed`.\""
	Milestone int64    "name:\"milestone\" help:\"The `number` of the milestone to associate this issue with or `null` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._\""
	Labels    []string "name:\"labels\" help:\"Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._\""
	Assignees []string "name:\"assignees\" help:\"Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._\""
}

func (c *IssuesEditCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateBody("title", c.Title)
	c.updateBody("body", c.Body)
	c.updateBody("assignee", c.Assignee)
	c.updateBody("state", c.State)
	c.updateBody("milestone", c.Milestone)
	c.updateBody("labels", c.Labels)
	c.updateBody("assignees", c.Assignees)
	return c.doRequest("PATCH")
}

type IssuesLockCmd struct {
	baseCmd
	Owner      string `required:"" name:"owner"`
	Repo       string `required:"" name:"repo"`
	Number     int64  `required:"" name:"number"`
	LockReason string "name:\"lock_reason\" help:\"The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n\\* `off-topic`  \n\\* `too heated`  \n\\* `resolved`  \n\\* `spam`\""
}

func (c *IssuesLockCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/lock"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateBody("lock_reason", c.LockReason)
	return c.doRequest("PUT")
}

type IssuesUnlockCmd struct {
	baseCmd
	Owner  string `required:"" name:"owner"`
	Repo   string `required:"" name:"repo"`
	Number int64  `required:"" name:"number"`
}

func (c *IssuesUnlockCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/lock"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	return c.doRequest("DELETE")
}

type IssuesListAssigneesCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListAssigneesCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/assignees"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesCheckAssigneeCmd struct {
	baseCmd
	Owner    string `required:"" name:"owner"`
	Repo     string `required:"" name:"repo"`
	Assignee string `required:"" name:"assignee"`
}

func (c *IssuesCheckAssigneeCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/assignees/:assignee"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("assignee", c.Assignee)
	return c.doRequest("GET")
}

type IssuesAddAssigneesCmd struct {
	baseCmd
	Owner     string   `required:"" name:"owner"`
	Repo      string   `required:"" name:"repo"`
	Number    int64    `required:"" name:"number"`
	Assignees []string `name:"assignees" help:"Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._"`
}

func (c *IssuesAddAssigneesCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/assignees"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateBody("assignees", c.Assignees)
	return c.doRequest("POST")
}

type IssuesRemoveAssigneesCmd struct {
	baseCmd
	Owner     string   `required:"" name:"owner"`
	Repo      string   `required:"" name:"repo"`
	Number    int64    `required:"" name:"number"`
	Assignees []string `name:"assignees" help:"Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._"`
}

func (c *IssuesRemoveAssigneesCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/assignees"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateBody("assignees", c.Assignees)
	return c.doRequest("DELETE")
}

type IssuesListCommentsCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	Number  int64  `required:"" name:"number"`
	Since   string "name:\"since\" help:\"Only comments updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListCommentsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/comments"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateURLQuery("since", c.Since)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesListCommentsForRepoCmd struct {
	baseCmd
	Owner     string `required:"" name:"owner"`
	Repo      string `required:"" name:"repo"`
	Sort      string "name:\"sort\" help:\"Either `created` or `updated`.\""
	Direction string "name:\"direction\" help:\"Either `asc` or `desc`. Ignored without the `sort` parameter.\""
	Since     string "name:\"since\" help:\"Only comments updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
}

func (c *IssuesListCommentsForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/comments"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLQuery("sort", c.Sort)
	c.updateURLQuery("direction", c.Direction)
	c.updateURLQuery("since", c.Since)
	return c.doRequest("GET")
}

type IssuesGetCommentCmd struct {
	baseCmd
	Owner     string `required:"" name:"owner"`
	Repo      string `required:"" name:"repo"`
	CommentId int64  `required:"" name:"comment_id"`
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesGetCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/comments/:comment_id"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("comment_id", c.CommentId)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesCreateCommentCmd struct {
	baseCmd
	Owner  string `required:"" name:"owner"`
	Repo   string `required:"" name:"repo"`
	Number int64  `required:"" name:"number"`
	Body   string `required:"" name:"body" help:"The contents of the comment."`
}

func (c *IssuesCreateCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/comments"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateBody("body", c.Body)
	return c.doRequest("POST")
}

type IssuesEditCommentCmd struct {
	baseCmd
	Owner     string `required:"" name:"owner"`
	Repo      string `required:"" name:"repo"`
	CommentId int64  `required:"" name:"comment_id"`
	Body      string `required:"" name:"body" help:"The contents of the comment."`
}

func (c *IssuesEditCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/comments/:comment_id"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("comment_id", c.CommentId)
	c.updateBody("body", c.Body)
	return c.doRequest("PATCH")
}

type IssuesDeleteCommentCmd struct {
	baseCmd
	Owner     string `required:"" name:"owner"`
	Repo      string `required:"" name:"repo"`
	CommentId int64  `required:"" name:"comment_id"`
}

func (c *IssuesDeleteCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/comments/:comment_id"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("comment_id", c.CommentId)
	return c.doRequest("DELETE")
}

type IssuesListEventsCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	Number  int64  `required:"" name:"number"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListEventsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/events"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesListEventsForRepoCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListEventsForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/events"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesGetEventCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	EventId int64  `required:"" name:"event_id"`
}

func (c *IssuesGetEventCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/events/:event_id"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("event_id", c.EventId)
	return c.doRequest("GET")
}

type IssuesListLabelsForRepoCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListLabelsForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/labels"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesGetLabelCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
	Name  string `required:"" name:"name"`
}

func (c *IssuesGetLabelCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/labels/:name"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("name", c.Name)
	return c.doRequest("GET")
}

type IssuesCreateLabelCmd struct {
	baseCmd
	Owner       string `required:"" name:"owner"`
	Repo        string `required:"" name:"repo"`
	Name        string "required:\"\" name:\"name\" help:\"The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://a248.e.akamai.net/assets.github.com/images/icons/emoji/unicode/1f353.png ':strawberry:'). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).\""
	Color       string "required:\"\" name:\"color\" help:\"The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.\""
	Description string `name:"description" help:"A short description of the label."`
}

func (c *IssuesCreateLabelCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/labels"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateBody("name", c.Name)
	c.updateBody("color", c.Color)
	c.updateBody("description", c.Description)
	return c.doRequest("POST")
}

type IssuesUpdateLabelCmd struct {
	baseCmd
	Owner       string `required:"" name:"owner"`
	Repo        string `required:"" name:"repo"`
	CurrentName string `required:"" name:"current_name"`
	Name        string "name:\"name\" help:\"The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://a248.e.akamai.net/assets.github.com/images/icons/emoji/unicode/1f353.png ':strawberry:'). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).\""
	Color       string "name:\"color\" help:\"The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.\""
	Description string `name:"description" help:"A short description of the label."`
}

func (c *IssuesUpdateLabelCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/labels/:current_name"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("current_name", c.CurrentName)
	c.updateBody("name", c.Name)
	c.updateBody("color", c.Color)
	c.updateBody("description", c.Description)
	return c.doRequest("PATCH")
}

type IssuesDeleteLabelCmd struct {
	baseCmd
	Owner string `required:"" name:"owner"`
	Repo  string `required:"" name:"repo"`
	Name  string `required:"" name:"name"`
}

func (c *IssuesDeleteLabelCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/labels/:name"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("name", c.Name)
	return c.doRequest("DELETE")
}

type IssuesListLabelsOnIssueCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	Number  int64  `required:"" name:"number"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListLabelsOnIssueCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/labels"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesAddLabelsCmd struct {
	baseCmd
	Owner  string   `required:"" name:"owner"`
	Repo   string   `required:"" name:"repo"`
	Number int64    `required:"" name:"number"`
	Labels []string `required:"" name:"labels"`
}

func (c *IssuesAddLabelsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/labels"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateBody("labels", c.Labels)
	return c.doRequest("POST")
}

type IssuesRemoveLabelCmd struct {
	baseCmd
	Owner  string `required:"" name:"owner"`
	Repo   string `required:"" name:"repo"`
	Number int64  `required:"" name:"number"`
	Name   string `required:"" name:"name"`
}

func (c *IssuesRemoveLabelCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/labels/:name"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateURLPath("name", c.Name)
	return c.doRequest("DELETE")
}

type IssuesReplaceLabelsCmd struct {
	baseCmd
	Owner  string   `required:"" name:"owner"`
	Repo   string   `required:"" name:"repo"`
	Number int64    `required:"" name:"number"`
	Labels []string `required:"" name:"labels"`
}

func (c *IssuesReplaceLabelsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/labels"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateBody("labels", c.Labels)
	return c.doRequest("PUT")
}

type IssuesRemoveLabelsCmd struct {
	baseCmd
	Owner  string `required:"" name:"owner"`
	Repo   string `required:"" name:"repo"`
	Number int64  `required:"" name:"number"`
}

func (c *IssuesRemoveLabelsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/labels"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	return c.doRequest("DELETE")
}

type IssuesListLabelsForMilestoneCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	Number  int64  `required:"" name:"number"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListLabelsForMilestoneCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/milestones/:number/labels"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesListMilestonesForRepoCmd struct {
	baseCmd
	Owner     string `required:"" name:"owner"`
	Repo      string `required:"" name:"repo"`
	State     string "name:\"state\" help:\"The state of the milestone. Either `open`, `closed`, or `all`.\""
	Sort      string "name:\"sort\" help:\"What to sort results by. Either `due_on` or `completeness`.\""
	Direction string "name:\"direction\" help:\"The direction of the sort. Either `asc` or `desc`.\""
	PerPage   int64  `name:"per_page" help:"Results per page (max 100)"`
	Page      int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListMilestonesForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/milestones"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLQuery("state", c.State)
	c.updateURLQuery("sort", c.Sort)
	c.updateURLQuery("direction", c.Direction)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type IssuesGetMilestoneCmd struct {
	baseCmd
	Owner  string `required:"" name:"owner"`
	Repo   string `required:"" name:"repo"`
	Number int64  `required:"" name:"number"`
}

func (c *IssuesGetMilestoneCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/milestones/:number"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	return c.doRequest("GET")
}

type IssuesCreateMilestoneCmd struct {
	baseCmd
	Owner       string `required:"" name:"owner"`
	Repo        string `required:"" name:"repo"`
	Title       string `required:"" name:"title" help:"The title of the milestone."`
	State       string "name:\"state\" help:\"The state of the milestone. Either `open` or `closed`.\""
	Description string `name:"description" help:"A description of the milestone."`
	DueOn       string "name:\"due_on\" help:\"The milestone due date. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
}

func (c *IssuesCreateMilestoneCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/milestones"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateBody("title", c.Title)
	c.updateBody("state", c.State)
	c.updateBody("description", c.Description)
	c.updateBody("due_on", c.DueOn)
	return c.doRequest("POST")
}

type IssuesUpdateMilestoneCmd struct {
	baseCmd
	Owner       string `required:"" name:"owner"`
	Repo        string `required:"" name:"repo"`
	Number      int64  `required:"" name:"number"`
	Title       string `name:"title" help:"The title of the milestone."`
	State       string "name:\"state\" help:\"The state of the milestone. Either `open` or `closed`.\""
	Description string `name:"description" help:"A description of the milestone."`
	DueOn       string "name:\"due_on\" help:\"The milestone due date. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.\""
}

func (c *IssuesUpdateMilestoneCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/milestones/:number"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateBody("title", c.Title)
	c.updateBody("state", c.State)
	c.updateBody("description", c.Description)
	c.updateBody("due_on", c.DueOn)
	return c.doRequest("PATCH")
}

type IssuesDeleteMilestoneCmd struct {
	baseCmd
	Owner  string `required:"" name:"owner"`
	Repo   string `required:"" name:"repo"`
	Number int64  `required:"" name:"number"`
}

func (c *IssuesDeleteMilestoneCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/milestones/:number"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	return c.doRequest("DELETE")
}

type IssuesListEventsForTimelineCmd struct {
	baseCmd
	Owner   string `required:"" name:"owner"`
	Repo    string `required:"" name:"repo"`
	Number  int64  `required:"" name:"number"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *IssuesListEventsForTimelineCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/repos/:owner/:repo/issues/:number/timeline"
	c.updateURLPath("owner", c.Owner)
	c.updateURLPath("repo", c.Repo)
	c.updateURLPath("number", c.Number)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}
