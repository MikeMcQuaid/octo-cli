// Code generated by go-github-cli/generator; DO NOT EDIT

package services

type OrgsCmd struct {
	ListForCurrentUser                 OrgsListForCurrentUserCmd                 `cmd:"" help:"List your organizations"`
	List                               OrgsListCmd                               `cmd:"" help:"List all organizations"`
	ListForUser                        OrgsListForUserCmd                        `cmd:"" help:"List user organizations"`
	Get                                OrgsGetCmd                                `cmd:"" help:"Get an organization"`
	Edit                               OrgsEditCmd                               `cmd:"" help:"Edit an organization"`
	ListBlockedUsers                   OrgsListBlockedUsersCmd                   `cmd:"" help:"List blocked users"`
	CheckBlockedUser                   OrgsCheckBlockedUserCmd                   `cmd:"" help:"Check whether a user is blocked from an organization"`
	BlockUser                          OrgsBlockUserCmd                          `cmd:"" help:"Block a user"`
	UnblockUser                        OrgsUnblockUserCmd                        `cmd:"" help:"Unblock a user"`
	ListMembers                        OrgsListMembersCmd                        `cmd:"" help:"Members list"`
	CheckMembership                    OrgsCheckMembershipCmd                    `cmd:"" help:"Check membership"`
	RemoveMember                       OrgsRemoveMemberCmd                       `cmd:"" help:"Remove a member"`
	ListPublicMembers                  OrgsListPublicMembersCmd                  `cmd:"" help:"Public members list"`
	CheckPublicMembership              OrgsCheckPublicMembershipCmd              `cmd:"" help:"Check public membership"`
	PublicizeMembership                OrgsPublicizeMembershipCmd                `cmd:"" help:"Publicize a user's membership"`
	ConcealMembership                  OrgsConcealMembershipCmd                  `cmd:"" help:"Conceal a user's membership"`
	GetMembershipForUser               OrgsGetMembershipForUserCmd               `cmd:"" help:"Get organization membership"`
	AddOrUpdateMembership              OrgsAddOrUpdateMembershipCmd              `cmd:"" help:"Add or update organization membership"`
	RemoveMembership                   OrgsRemoveMembershipCmd                   `cmd:"" help:"Remove organization membership"`
	ListInvitationTeams                OrgsListInvitationTeamsCmd                `cmd:"" help:"List organization invitation teams"`
	ListPendingInvitations             OrgsListPendingInvitationsCmd             `cmd:"" help:"List pending organization invitations"`
	CreateInvitation                   OrgsCreateInvitationCmd                   `cmd:"" help:"Create organization invitation"`
	ListMemberships                    OrgsListMembershipsCmd                    `cmd:"" help:"List your organization memberships"`
	GetMembership                      OrgsGetMembershipCmd                      `cmd:"" help:"Get your organization membership"`
	EditMembership                     OrgsEditMembershipCmd                     `cmd:"" help:"Edit your organization membership"`
	ListOutsideCollaborators           OrgsListOutsideCollaboratorsCmd           `cmd:"" help:"List outside collaborators"`
	RemoveOutsideCollaborator          OrgsRemoveOutsideCollaboratorCmd          `cmd:"" help:"Remove outside collaborator"`
	ConvertMemberToOutsideCollaborator OrgsConvertMemberToOutsideCollaboratorCmd `cmd:"" help:"Convert member to outside collaborator"`
	ListHooks                          OrgsListHooksCmd                          `cmd:"" help:"List hooks"`
	GetHook                            OrgsGetHookCmd                            `cmd:"" help:"Get single hook"`
	PingHook                           OrgsPingHookCmd                           `cmd:"" help:"Ping a hook"`
	DeleteHook                         OrgsDeleteHookCmd                         `cmd:"" help:"Delete a hook"`
}

type OrgsListForCurrentUserCmd struct {
	baseCmd
	PerPage int64 `name:"per_page" help:"Results per page (max 100)"`
	Page    int64 `name:"page" help:"Page number of the results to fetch."`
}

func (c *OrgsListForCurrentUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/orgs"
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type OrgsListCmd struct {
	baseCmd
	Since   string `name:"since" help:"The integer ID of the last Organization that you've seen."`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *OrgsListCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/organizations"
	c.updateURLQuery("since", c.Since)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type OrgsListForUserCmd struct {
	baseCmd
	Username string `required:"" name:"username"`
	PerPage  int64  `name:"per_page" help:"Results per page (max 100)"`
	Page     int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *OrgsListForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/users/:username/orgs"
	c.updateURLPath("username", c.Username)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type OrgsGetCmd struct {
	baseCmd
	Org string `required:"" name:"org"`
}

func (c *OrgsGetCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org"
	c.updateURLPath("org", c.Org)
	return c.doRequest("GET")
}

type OrgsEditCmd struct {
	baseCmd
	Org                          string `required:"" name:"org"`
	BillingEmail                 string `name:"billing_email" help:"Billing email address. This address is not publicized."`
	Company                      string `name:"company" help:"The company name."`
	Email                        string `name:"email" help:"The publicly visible email address."`
	Location                     string `name:"location" help:"The location."`
	Name                         string `name:"name" help:"The shorthand name of the company."`
	Description                  string `name:"description" help:"The description of the company."`
	HasOrganizationProjects      bool   `name:"has_organization_projects" help:"Toggles whether organization projects are enabled for the organization."`
	HasRepositoryProjects        bool   `name:"has_repository_projects" help:"Toggles whether repository projects are enabled for repositories that belong to the organization."`
	DefaultRepositoryPermission  string "name:\"default_repository_permission\" help:\"Default permission level members have for organization repositories:  \n\\* `read` - can pull, but not push to or administer this repository.  \n\\* `write` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push, and administer this repository.  \n\\* `none` - no permissions granted by default.\""
	MembersCanCreateRepositories bool   "name:\"members_can_create_repositories\" help:\"Toggles ability of non-admin organization members to create repositories  \n\\* `true` - all organization members can create repositories.  \n\\* `false` - only admin members can create repositories.\""
}

func (c *OrgsEditCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org"
	c.updateURLPath("org", c.Org)
	c.updateBody("billing_email", c.BillingEmail)
	c.updateBody("company", c.Company)
	c.updateBody("email", c.Email)
	c.updateBody("location", c.Location)
	c.updateBody("name", c.Name)
	c.updateBody("description", c.Description)
	c.updateBody("has_organization_projects", c.HasOrganizationProjects)
	c.updateBody("has_repository_projects", c.HasRepositoryProjects)
	c.updateBody("default_repository_permission", c.DefaultRepositoryPermission)
	c.updateBody("members_can_create_repositories", c.MembersCanCreateRepositories)
	return c.doRequest("PATCH")
}

type OrgsListBlockedUsersCmd struct {
	baseCmd
	Org string `required:"" name:"org"`
}

func (c *OrgsListBlockedUsersCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/blocks"
	c.updateURLPath("org", c.Org)
	return c.doRequest("GET")
}

type OrgsCheckBlockedUserCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
}

func (c *OrgsCheckBlockedUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/blocks/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	return c.doRequest("GET")
}

type OrgsBlockUserCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
}

func (c *OrgsBlockUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/blocks/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	return c.doRequest("PUT")
}

type OrgsUnblockUserCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
}

func (c *OrgsUnblockUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/blocks/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	return c.doRequest("DELETE")
}

type OrgsListMembersCmd struct {
	baseCmd
	Org     string `required:"" name:"org"`
	Filter  string "name:\"filter\" help:\"Filter members returned in the list. Can be one of:  \n\\* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.  \n\\* `all` - All members the authenticated user can see.\""
	Role    string "name:\"role\" help:\"Filter members returned by their role. Can be one of:  \n\\* `all` - All members of the organization, regardless of role.  \n\\* `admin` - Organization owners.  \n\\* `member` - Non-owner organization members.\""
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *OrgsListMembersCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/members"
	c.updateURLPath("org", c.Org)
	c.updateURLQuery("filter", c.Filter)
	c.updateURLQuery("role", c.Role)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type OrgsCheckMembershipCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
}

func (c *OrgsCheckMembershipCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/members/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	return c.doRequest("GET")
}

type OrgsRemoveMemberCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
}

func (c *OrgsRemoveMemberCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/members/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	return c.doRequest("DELETE")
}

type OrgsListPublicMembersCmd struct {
	baseCmd
	Org     string `required:"" name:"org"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *OrgsListPublicMembersCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/public_members"
	c.updateURLPath("org", c.Org)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type OrgsCheckPublicMembershipCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
}

func (c *OrgsCheckPublicMembershipCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/public_members/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	return c.doRequest("GET")
}

type OrgsPublicizeMembershipCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
}

func (c *OrgsPublicizeMembershipCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/public_members/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	return c.doRequest("PUT")
}

type OrgsConcealMembershipCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
}

func (c *OrgsConcealMembershipCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/public_members/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	return c.doRequest("DELETE")
}

type OrgsGetMembershipForUserCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
}

func (c *OrgsGetMembershipForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/memberships/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	return c.doRequest("GET")
}

type OrgsAddOrUpdateMembershipCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
	Role     string "name:\"role\" help:\"The role to give the user in the organization. Can be one of:  \n\\* `admin` - The user will become an owner of the organization.  \n\\* `member` - The user will become a non-owner member of the organization.\""
}

func (c *OrgsAddOrUpdateMembershipCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/memberships/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	c.updateBody("role", c.Role)
	return c.doRequest("PUT")
}

type OrgsRemoveMembershipCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
}

func (c *OrgsRemoveMembershipCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/memberships/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	return c.doRequest("DELETE")
}

type OrgsListInvitationTeamsCmd struct {
	baseCmd
	Org          string `required:"" name:"org"`
	InvitationId int64  `required:"" name:"invitation_id"`
	PerPage      int64  `name:"per_page" help:"Results per page (max 100)"`
	Page         int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *OrgsListInvitationTeamsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/invitations/:invitation_id/teams"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("invitation_id", c.InvitationId)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type OrgsListPendingInvitationsCmd struct {
	baseCmd
	Org     string `required:"" name:"org"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *OrgsListPendingInvitationsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/invitations"
	c.updateURLPath("org", c.Org)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type OrgsCreateInvitationCmd struct {
	baseCmd
	Org       string  `required:"" name:"org"`
	InviteeId int64   "name:\"invitee_id\" help:\"**Required unless you provide `email`**. GitHub user ID for the person you are inviting.\""
	Email     string  "name:\"email\" help:\"**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.\""
	Role      string  "name:\"role\" help:\"Specify role for new member. Can be one of:  \n\\* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n\\* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  \n\\* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.\""
	TeamIds   []int64 `name:"team_ids" help:"Specify IDs for the teams you want to invite new members to."`
}

func (c *OrgsCreateInvitationCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/invitations"
	c.updateURLPath("org", c.Org)
	c.updateBody("invitee_id", c.InviteeId)
	c.updateBody("email", c.Email)
	c.updateBody("role", c.Role)
	c.updateBody("team_ids", c.TeamIds)
	return c.doRequest("POST")
}

type OrgsListMembershipsCmd struct {
	baseCmd
	State   string "name:\"state\" help:\"Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.\""
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *OrgsListMembershipsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/memberships/orgs"
	c.updateURLQuery("state", c.State)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type OrgsGetMembershipCmd struct {
	baseCmd
	Org string `required:"" name:"org"`
}

func (c *OrgsGetMembershipCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/memberships/orgs/:org"
	c.updateURLPath("org", c.Org)
	return c.doRequest("GET")
}

type OrgsEditMembershipCmd struct {
	baseCmd
	Org   string `required:"" name:"org"`
	State string "required:\"\" name:\"state\" help:\"The state that the membership should be in. Only `'active'` will be accepted.\""
}

func (c *OrgsEditMembershipCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/user/memberships/orgs/:org"
	c.updateURLPath("org", c.Org)
	c.updateBody("state", c.State)
	return c.doRequest("PATCH")
}

type OrgsListOutsideCollaboratorsCmd struct {
	baseCmd
	Org     string `required:"" name:"org"`
	Filter  string "name:\"filter\" help:\"Filter the list of outside collaborators. Can be one of:  \n\\* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.  \n\\* `all`: All outside collaborators.\""
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *OrgsListOutsideCollaboratorsCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/outside_collaborators"
	c.updateURLPath("org", c.Org)
	c.updateURLQuery("filter", c.Filter)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type OrgsRemoveOutsideCollaboratorCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
}

func (c *OrgsRemoveOutsideCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/outside_collaborators/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	return c.doRequest("DELETE")
}

type OrgsConvertMemberToOutsideCollaboratorCmd struct {
	baseCmd
	Org      string `required:"" name:"org"`
	Username string `required:"" name:"username"`
}

func (c *OrgsConvertMemberToOutsideCollaboratorCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/outside_collaborators/:username"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("username", c.Username)
	return c.doRequest("PUT")
}

type OrgsListHooksCmd struct {
	baseCmd
	Org     string `required:"" name:"org"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *OrgsListHooksCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/hooks"
	c.updateURLPath("org", c.Org)
	c.updateURLQuery("per_page", c.PerPage)
	c.updateURLQuery("page", c.Page)
	return c.doRequest("GET")
}

type OrgsGetHookCmd struct {
	baseCmd
	Org    string `required:"" name:"org"`
	HookId int64  `required:"" name:"hook_id"`
}

func (c *OrgsGetHookCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/hooks/:hook_id"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("hook_id", c.HookId)
	return c.doRequest("GET")
}

type OrgsPingHookCmd struct {
	baseCmd
	Org    string `required:"" name:"org"`
	HookId int64  `required:"" name:"hook_id"`
}

func (c *OrgsPingHookCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/hooks/:hook_id/pings"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("hook_id", c.HookId)
	return c.doRequest("POST")
}

type OrgsDeleteHookCmd struct {
	baseCmd
	Org    string `required:"" name:"org"`
	HookId int64  `required:"" name:"hook_id"`
}

func (c *OrgsDeleteHookCmd) Run(isValueSetMap map[string]bool) error {
	c.isValueSetMap = isValueSetMap
	c.url.Path = "/orgs/:org/hooks/:hook_id"
	c.updateURLPath("org", c.Org)
	c.updateURLPath("hook_id", c.HookId)
	return c.doRequest("DELETE")
}
