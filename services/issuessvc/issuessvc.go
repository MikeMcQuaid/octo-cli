// Code generated by go-github-cli/generator DO NOT EDIT
package issuessvc

import (
	"context"
	"encoding/json"
	"net/http"
	"net/url"
	"strings"

	"github.com/alecthomas/kong"
	"github.com/google/go-github/github"
	"golang.org/x/oauth2"
)

var transportWrapper interface {
	SetTransport(t http.RoundTripper)
	http.RoundTripper
}

func buildGithubClient(ctx context.Context, token, apiBaseURL string) (*github.Client, error) {
	apiBaseURL = strings.TrimSuffix(apiBaseURL, "/") + "/"
	ts := oauth2.StaticTokenSource(&oauth2.Token{AccessToken: token})
	tc := oauth2.NewClient(ctx, ts)
	if transportWrapper != nil {
		transportWrapper.SetTransport(tc.Transport)
		tc.Transport = transportWrapper
	}
	client := github.NewClient(tc)
	baseURL, err := url.Parse(apiBaseURL)
	client.BaseURL = baseURL
	return client, err
}

type IssuesCmd struct {
	AddLabelsToIssue IssuesAddLabelsToIssueCmd `cmd:"" help:"Add labels to an issue"`
	Create           IssuesCreateCmd           `cmd:"" help:"Create an issue"`
	Edit             IssuesEditCmd             `cmd:"" help:"Edit an issue"`
	List             IssuesListCmd             `cmd:"" help:"List all issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories"`
	Lock             IssuesLockCmd             `cmd:"" help:"Lock an issue"`
}

type IssuesAddLabelsToIssueCmd struct {
	Token      string   `env:"GITHUB_TOKEN" required:""`
	APIBaseURL string   `env:"GITHUB_API_BASE_URL" default:"https://api.github.com"`
	Owner      string   `required:""`
	Repo       string   `required:""`
	Number     int      `required:""`
	Labels     []string `required:""`
}

func (c *IssuesAddLabelsToIssueCmd) Run(k *kong.Context) error {
	ctx := context.Background()
	client, e := buildGithubClient(ctx, c.Token, c.APIBaseURL)
	if e != nil {
		return e
	}
	element, _, err := client.Issues.AddLabelsToIssue(ctx, c.Owner, c.Repo, c.Number, c.Labels)
	if err != nil {
		return err
	}
	return json.NewEncoder(k.Stdout).Encode(element)
}

type IssuesCreateCmd struct {
	Token      string `env:"GITHUB_TOKEN" required:""`
	APIBaseURL string `env:"GITHUB_API_BASE_URL" default:"https://api.github.com"`
	Owner      string `required:""`
	Repo       string `required:""`
	issuesCreateCmdIssueRequestFlags
}

func (c *IssuesCreateCmd) Run(k *kong.Context) error {
	ctx := context.Background()
	client, e := buildGithubClient(ctx, c.Token, c.APIBaseURL)
	if e != nil {
		return e
	}
	element, _, err := client.Issues.Create(ctx, c.Owner, c.Repo, c.toIssueRequest(k))
	if err != nil {
		return err
	}
	return json.NewEncoder(k.Stdout).Encode(element)
}

type issuesCreateCmdIssueRequestFlags struct {
	Title     string   `name:"title" required:"" help:"The title of the issue."`
	Body      string   `name:"body" help:"The contents of the issue."`
	Labels    []string `name:"labels" help:"Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._"`
	Assignee  string   `name:"assignee" help:"Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_"`
	Milestone int      "name:\"milestone\" help:\"The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._\""
	Assignees []string `name:"assignees" help:"Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._"`
}

func (t issuesCreateCmdIssueRequestFlags) toIssueRequest(k *kong.Context) *github.IssueRequest {
	val := &github.IssueRequest{}

	isValueSet := func(valueName string) bool {
		if k == nil {
			return false
		}
		for _, flag := range k.Flags() {
			if flag.Name == valueName {
				return flag.Set
			}
		}
		return false
	}

	if isValueSet("title") {
		val.Title = &t.Title
	}

	if isValueSet("body") {
		val.Body = &t.Body
	}

	if isValueSet("labels") {
		val.Labels = &t.Labels
	}

	if isValueSet("assignee") {
		val.Assignee = &t.Assignee
	}

	if isValueSet("milestone") {
		val.Milestone = &t.Milestone
	}

	if isValueSet("assignees") {
		val.Assignees = &t.Assignees
	}

	return val
}

type IssuesEditCmd struct {
	Token      string `env:"GITHUB_TOKEN" required:""`
	APIBaseURL string `env:"GITHUB_API_BASE_URL" default:"https://api.github.com"`
	Owner      string `required:""`
	Repo       string `required:""`
	Number     int    `required:""`
	issuesEditCmdIssueRequestFlags
}

func (c *IssuesEditCmd) Run(k *kong.Context) error {
	ctx := context.Background()
	client, e := buildGithubClient(ctx, c.Token, c.APIBaseURL)
	if e != nil {
		return e
	}
	element, _, err := client.Issues.Edit(ctx, c.Owner, c.Repo, c.Number, c.toIssueRequest(k))
	if err != nil {
		return err
	}
	return json.NewEncoder(k.Stdout).Encode(element)
}

type issuesEditCmdIssueRequestFlags struct {
	Title     string   `name:"title" help:"The title of the issue."`
	Body      string   `name:"body" help:"The contents of the issue."`
	Labels    []string "name:\"labels\" help:\"Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._\""
	Assignee  string   `name:"assignee" help:"Login for the user that this issue should be assigned to. **This field is deprecated.**"`
	State     string   "name:\"state\" help:\"State of the issue. Either `open` or `closed`.\""
	Milestone int      "name:\"milestone\" help:\"The `number` of the milestone to associate this issue with or `null` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._\""
	Assignees []string "name:\"assignees\" help:\"Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._\""
}

func (t issuesEditCmdIssueRequestFlags) toIssueRequest(k *kong.Context) *github.IssueRequest {
	val := &github.IssueRequest{}

	isValueSet := func(valueName string) bool {
		if k == nil {
			return false
		}
		for _, flag := range k.Flags() {
			if flag.Name == valueName {
				return flag.Set
			}
		}
		return false
	}

	if isValueSet("title") {
		val.Title = &t.Title
	}

	if isValueSet("body") {
		val.Body = &t.Body
	}

	if isValueSet("labels") {
		val.Labels = &t.Labels
	}

	if isValueSet("assignee") {
		val.Assignee = &t.Assignee
	}

	if isValueSet("state") {
		val.State = &t.State
	}

	if isValueSet("milestone") {
		val.Milestone = &t.Milestone
	}

	if isValueSet("assignees") {
		val.Assignees = &t.Assignees
	}

	return val
}

type IssuesListCmd struct {
	Token      string `env:"GITHUB_TOKEN" required:""`
	APIBaseURL string `env:"GITHUB_API_BASE_URL" default:"https://api.github.com"`
	All        bool   ``
	issuesListCmdIssueListOptionsFlags
}

func (c *IssuesListCmd) Run(k *kong.Context) error {
	ctx := context.Background()
	client, e := buildGithubClient(ctx, c.Token, c.APIBaseURL)
	if e != nil {
		return e
	}
	element, _, err := client.Issues.List(ctx, c.All, c.toIssueListOptions(k))
	if err != nil {
		return err
	}
	return json.NewEncoder(k.Stdout).Encode(element)
}

type issuesListCmdIssueListOptionsFlags struct {
}

func (t issuesListCmdIssueListOptionsFlags) toIssueListOptions(k *kong.Context) *github.IssueListOptions {
	val := &github.IssueListOptions{}

	return val
}

type IssuesLockCmd struct {
	Token      string `env:"GITHUB_TOKEN" required:""`
	APIBaseURL string `env:"GITHUB_API_BASE_URL" default:"https://api.github.com"`
	Owner      string `required:""`
	Repo       string `required:""`
	Number     int    `required:""`
	issuesLockCmdLockIssueOptionsFlags
}

func (c *IssuesLockCmd) Run(k *kong.Context) error {
	ctx := context.Background()
	client, e := buildGithubClient(ctx, c.Token, c.APIBaseURL)
	if e != nil {
		return e
	}
	_, err := client.Issues.Lock(ctx, c.Owner, c.Repo, c.Number, c.toLockIssueOptions(k))
	return err
}

type issuesLockCmdLockIssueOptionsFlags struct {
	LockReason string "name:\"lock-reason\" help:\"The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n\\* `off-topic`  \n\\* `too heated`  \n\\* `resolved`  \n\\* `spam`\""
}

func (t issuesLockCmdLockIssueOptionsFlags) toLockIssueOptions(k *kong.Context) *github.LockIssueOptions {
	val := &github.LockIssueOptions{}

	val.LockReason = t.LockReason

	return val
}
