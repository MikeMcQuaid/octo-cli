// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import (
	"github.com/octo-cli/octo-cli/internal"
)

type ActionsCmd struct {
	CancelWorkflowRun              ActionsCancelWorkflowRunCmd              `cmd:""`
	CreateOrUpdateSecretForRepo    ActionsCreateOrUpdateSecretForRepoCmd    `cmd:""`
	CreateRegistrationTokenForOrg  ActionsCreateRegistrationTokenForOrgCmd  `cmd:""`
	CreateRegistrationTokenForRepo ActionsCreateRegistrationTokenForRepoCmd `cmd:""`
	CreateRemoveTokenForOrg        ActionsCreateRemoveTokenForOrgCmd        `cmd:""`
	CreateRemoveTokenForRepo       ActionsCreateRemoveTokenForRepoCmd       `cmd:""`
	DeleteArtifact                 ActionsDeleteArtifactCmd                 `cmd:""`
	DeleteSecretFromRepo           ActionsDeleteSecretFromRepoCmd           `cmd:""`
	DeleteSelfHostedRunnerFromOrg  ActionsDeleteSelfHostedRunnerFromOrgCmd  `cmd:""`
	DeleteSelfHostedRunnerFromRepo ActionsDeleteSelfHostedRunnerFromRepoCmd `cmd:""`
	DeleteWorkflowRunLogs          ActionsDeleteWorkflowRunLogsCmd          `cmd:""`
	DownloadArtifact               ActionsDownloadArtifactCmd               `cmd:""`
	DownloadWorkflowJobLogs        ActionsDownloadWorkflowJobLogsCmd        `cmd:""`
	DownloadWorkflowRunLogs        ActionsDownloadWorkflowRunLogsCmd        `cmd:""`
	GetArtifact                    ActionsGetArtifactCmd                    `cmd:""`
	GetPublicKey                   ActionsGetPublicKeyCmd                   `cmd:""`
	GetSecret                      ActionsGetSecretCmd                      `cmd:""`
	GetSelfHostedRunnerForOrg      ActionsGetSelfHostedRunnerForOrgCmd      `cmd:""`
	GetSelfHostedRunnerForRepo     ActionsGetSelfHostedRunnerForRepoCmd     `cmd:""`
	GetWorkflow                    ActionsGetWorkflowCmd                    `cmd:""`
	GetWorkflowJob                 ActionsGetWorkflowJobCmd                 `cmd:""`
	GetWorkflowRun                 ActionsGetWorkflowRunCmd                 `cmd:""`
	ListArtifactsForRepo           ActionsListArtifactsForRepoCmd           `cmd:""`
	ListJobsForWorkflowRun         ActionsListJobsForWorkflowRunCmd         `cmd:""`
	ListRepoWorkflowRuns           ActionsListRepoWorkflowRunsCmd           `cmd:""`
	ListRepoWorkflows              ActionsListRepoWorkflowsCmd              `cmd:""`
	ListRunnerApplicationsForOrg   ActionsListRunnerApplicationsForOrgCmd   `cmd:""`
	ListRunnerApplicationsForRepo  ActionsListRunnerApplicationsForRepoCmd  `cmd:""`
	ListSecretsForRepo             ActionsListSecretsForRepoCmd             `cmd:""`
	ListSelfHostedRunnersForOrg    ActionsListSelfHostedRunnersForOrgCmd    `cmd:""`
	ListSelfHostedRunnersForRepo   ActionsListSelfHostedRunnersForRepoCmd   `cmd:""`
	ListWorkflowRunArtifacts       ActionsListWorkflowRunArtifactsCmd       `cmd:""`
	ListWorkflowRuns               ActionsListWorkflowRunsCmd               `cmd:""`
	ReRunWorkflow                  ActionsReRunWorkflowCmd                  `cmd:""`
}

type ActionsCancelWorkflowRunCmd struct {
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	RunId int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsCancelWorkflowRunCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runs/{run_id}/cancel")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("POST")
}

type ActionsCreateOrUpdateSecretForRepoCmd struct {
	EncryptedValue string `name:"encrypted_value"`
	KeyId          string `name:"key_id"`
	Name           string `required:"" name:"name"`
	Owner          string `name:"owner"`
	Repo           string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsCreateOrUpdateSecretForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/secrets/{name}")
	c.UpdateBody("encrypted_value", c.EncryptedValue)
	c.UpdateBody("key_id", c.KeyId)
	c.UpdateURLPath("name", c.Name)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("PUT")
}

type ActionsCreateRegistrationTokenForOrgCmd struct {
	Org string `required:"" name:"org"`
	internal.BaseCmd
}

func (c *ActionsCreateRegistrationTokenForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/runners/registration-token")
	c.UpdateURLPath("org", c.Org)
	return c.DoRequest("POST")
}

type ActionsCreateRegistrationTokenForRepoCmd struct {
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsCreateRegistrationTokenForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runners/registration-token")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ActionsCreateRemoveTokenForOrgCmd struct {
	Org string `required:"" name:"org"`
	internal.BaseCmd
}

func (c *ActionsCreateRemoveTokenForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/runners/remove-token")
	c.UpdateURLPath("org", c.Org)
	return c.DoRequest("POST")
}

type ActionsCreateRemoveTokenForRepoCmd struct {
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsCreateRemoveTokenForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runners/remove-token")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type ActionsDeleteArtifactCmd struct {
	ArtifactId int64  `required:"" name:"artifact_id"`
	Owner      string `name:"owner"`
	Repo       string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsDeleteArtifactCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/artifacts/{artifact_id}")
	c.UpdateURLPath("artifact_id", c.ArtifactId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ActionsDeleteSecretFromRepoCmd struct {
	Name  string `required:"" name:"name"`
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsDeleteSecretFromRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/secrets/{name}")
	c.UpdateURLPath("name", c.Name)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type ActionsDeleteSelfHostedRunnerFromOrgCmd struct {
	Org      string `required:"" name:"org"`
	RunnerId int64  `required:"" name:"runner_id"`
	internal.BaseCmd
}

func (c *ActionsDeleteSelfHostedRunnerFromOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/runners/{runner_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("runner_id", c.RunnerId)
	return c.DoRequest("DELETE")
}

type ActionsDeleteSelfHostedRunnerFromRepoCmd struct {
	Owner    string `name:"owner"`
	Repo     string `required:"" name:"repo"`
	RunnerId int64  `required:"" name:"runner_id"`
	internal.BaseCmd
}

func (c *ActionsDeleteSelfHostedRunnerFromRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runners/{runner_id}")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("runner_id", c.RunnerId)
	return c.DoRequest("DELETE")
}

type ActionsDeleteWorkflowRunLogsCmd struct {
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	RunId int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsDeleteWorkflowRunLogsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runs/{run_id}/logs")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("DELETE")
}

type ActionsDownloadArtifactCmd struct {
	ArchiveFormat string `required:"" name:"archive_format"`
	ArtifactId    int64  `required:"" name:"artifact_id"`
	Owner         string `name:"owner"`
	Repo          string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsDownloadArtifactCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}")
	c.UpdateURLPath("archive_format", c.ArchiveFormat)
	c.UpdateURLPath("artifact_id", c.ArtifactId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsDownloadWorkflowJobLogsCmd struct {
	JobId int64  `required:"" name:"job_id"`
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsDownloadWorkflowJobLogsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/jobs/{job_id}/logs")
	c.UpdateURLPath("job_id", c.JobId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsDownloadWorkflowRunLogsCmd struct {
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	RunId int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsDownloadWorkflowRunLogsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runs/{run_id}/logs")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("GET")
}

type ActionsGetArtifactCmd struct {
	ArtifactId int64  `required:"" name:"artifact_id"`
	Owner      string `name:"owner"`
	Repo       string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsGetArtifactCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/artifacts/{artifact_id}")
	c.UpdateURLPath("artifact_id", c.ArtifactId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsGetPublicKeyCmd struct {
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsGetPublicKeyCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/secrets/public-key")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsGetSecretCmd struct {
	Name  string `required:"" name:"name"`
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsGetSecretCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/secrets/{name}")
	c.UpdateURLPath("name", c.Name)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsGetSelfHostedRunnerForOrgCmd struct {
	Org      string `required:"" name:"org"`
	RunnerId int64  `required:"" name:"runner_id"`
	internal.BaseCmd
}

func (c *ActionsGetSelfHostedRunnerForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/runners/{runner_id}")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLPath("runner_id", c.RunnerId)
	return c.DoRequest("GET")
}

type ActionsGetSelfHostedRunnerForRepoCmd struct {
	Owner    string `name:"owner"`
	Repo     string `required:"" name:"repo"`
	RunnerId int64  `required:"" name:"runner_id"`
	internal.BaseCmd
}

func (c *ActionsGetSelfHostedRunnerForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runners/{runner_id}")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("runner_id", c.RunnerId)
	return c.DoRequest("GET")
}

type ActionsGetWorkflowCmd struct {
	Owner      string `name:"owner"`
	Repo       string `required:"" name:"repo"`
	WorkflowId int64  `required:"" name:"workflow_id"`
	internal.BaseCmd
}

func (c *ActionsGetWorkflowCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/workflows/{workflow_id}")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("workflow_id", c.WorkflowId)
	return c.DoRequest("GET")
}

type ActionsGetWorkflowJobCmd struct {
	JobId int64  `required:"" name:"job_id"`
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsGetWorkflowJobCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/jobs/{job_id}")
	c.UpdateURLPath("job_id", c.JobId)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsGetWorkflowRunCmd struct {
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	RunId int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsGetWorkflowRunCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runs/{run_id}")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("GET")
}

type ActionsListArtifactsForRepoCmd struct {
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsListArtifactsForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/artifacts")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsListJobsForWorkflowRunCmd struct {
	Filter  string `name:"filter"`
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	RunId   int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsListJobsForWorkflowRunCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runs/{run_id}/jobs")
	c.UpdateURLQuery("filter", c.Filter)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("GET")
}

type ActionsListRepoWorkflowRunsCmd struct {
	Actor   string `name:"actor"`
	Branch  string `name:"branch"`
	Event   string `name:"event"`
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	Status  string `name:"status"`
	internal.BaseCmd
}

func (c *ActionsListRepoWorkflowRunsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runs")
	c.UpdateURLQuery("actor", c.Actor)
	c.UpdateURLQuery("branch", c.Branch)
	c.UpdateURLQuery("event", c.Event)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("status", c.Status)
	return c.DoRequest("GET")
}

type ActionsListRepoWorkflowsCmd struct {
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsListRepoWorkflowsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/workflows")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsListRunnerApplicationsForOrgCmd struct {
	Org string `required:"" name:"org"`
	internal.BaseCmd
}

func (c *ActionsListRunnerApplicationsForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/runners/downloads")
	c.UpdateURLPath("org", c.Org)
	return c.DoRequest("GET")
}

type ActionsListRunnerApplicationsForRepoCmd struct {
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsListRunnerApplicationsForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runners/downloads")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsListSecretsForRepoCmd struct {
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsListSecretsForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/secrets")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsListSelfHostedRunnersForOrgCmd struct {
	Org     string `required:"" name:"org"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	internal.BaseCmd
}

func (c *ActionsListSelfHostedRunnersForOrgCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/orgs/{org}/actions/runners")
	c.UpdateURLPath("org", c.Org)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	return c.DoRequest("GET")
}

type ActionsListSelfHostedRunnersForRepoCmd struct {
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *ActionsListSelfHostedRunnersForRepoCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runners")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type ActionsListWorkflowRunArtifactsCmd struct {
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Repo    string `required:"" name:"repo"`
	RunId   int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsListWorkflowRunArtifactsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("GET")
}

type ActionsListWorkflowRunsCmd struct {
	Actor      string `name:"actor"`
	Branch     string `name:"branch"`
	Event      string `name:"event"`
	Owner      string `name:"owner"`
	Page       int64  `name:"page"`
	PerPage    int64  `name:"per_page"`
	Repo       string `required:"" name:"repo"`
	Status     string `name:"status"`
	WorkflowId int64  `required:"" name:"workflow_id"`
	internal.BaseCmd
}

func (c *ActionsListWorkflowRunsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs")
	c.UpdateURLQuery("actor", c.Actor)
	c.UpdateURLQuery("branch", c.Branch)
	c.UpdateURLQuery("event", c.Event)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLQuery("status", c.Status)
	c.UpdateURLPath("workflow_id", c.WorkflowId)
	return c.DoRequest("GET")
}

type ActionsReRunWorkflowCmd struct {
	Owner string `name:"owner"`
	Repo  string `required:"" name:"repo"`
	RunId int64  `required:"" name:"run_id"`
	internal.BaseCmd
}

func (c *ActionsReRunWorkflowCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/{owner}/{repo}/actions/runs/{run_id}/rerun")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("run_id", c.RunId)
	return c.DoRequest("POST")
}
