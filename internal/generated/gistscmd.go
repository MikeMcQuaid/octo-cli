// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import "github.com/octo-cli/octo-cli/internal"

type GistsCmd struct {
	ListPublicForUser GistsListPublicForUserCmd `cmd:"" help:"List public gists for the specified user - https://developer.github.com/v3/gists/#list-a-users-gists"`
	List              GistsListCmd              `cmd:"" help:"List the authenticated user's gists or if called anonymously, this will return all public gists - https://developer.github.com/v3/gists/#list-a-users-gists"`
	ListPublic        GistsListPublicCmd        `cmd:"" help:"List all public gists - https://developer.github.com/v3/gists/#list-all-public-gists"`
	ListStarred       GistsListStarredCmd       `cmd:"" help:"List starred gists - https://developer.github.com/v3/gists/#list-starred-gists"`
	Get               GistsGetCmd               `cmd:"" help:"Get a single gist - https://developer.github.com/v3/gists/#get-a-single-gist"`
	GetRevision       GistsGetRevisionCmd       `cmd:"" help:"Get a specific revision of a gist - https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist"`
	ListCommits       GistsListCommitsCmd       `cmd:"" help:"List gist commits - https://developer.github.com/v3/gists/#list-gist-commits"`
	Star              GistsStarCmd              `cmd:"" help:"Star a gist - https://developer.github.com/v3/gists/#star-a-gist"`
	Unstar            GistsUnstarCmd            `cmd:"" help:"Unstar a gist - https://developer.github.com/v3/gists/#unstar-a-gist"`
	CheckIsStarred    GistsCheckIsStarredCmd    `cmd:"" help:"Check if a gist is starred - https://developer.github.com/v3/gists/#check-if-a-gist-is-starred"`
	Fork              GistsForkCmd              `cmd:"" help:"Fork a gist - https://developer.github.com/v3/gists/#fork-a-gist"`
	ListForks         GistsListForksCmd         `cmd:"" help:"List gist forks - https://developer.github.com/v3/gists/#list-gist-forks"`
	Delete            GistsDeleteCmd            `cmd:"" help:"Delete a gist - https://developer.github.com/v3/gists/#delete-a-gist"`
	ListComments      GistsListCommentsCmd      `cmd:"" help:"List comments on a gist - https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist"`
	GetComment        GistsGetCommentCmd        `cmd:"" help:"Get a single comment - https://developer.github.com/v3/gists/comments/#get-a-single-comment"`
	CreateComment     GistsCreateCommentCmd     `cmd:"" help:"Create a comment - https://developer.github.com/v3/gists/comments/#create-a-comment"`
	EditComment       GistsEditCommentCmd       `cmd:"" help:"Edit a comment - https://developer.github.com/v3/gists/comments/#edit-a-comment"`
	DeleteComment     GistsDeleteCommentCmd     `cmd:"" help:"Delete a comment - https://developer.github.com/v3/gists/comments/#delete-a-comment"`
}

type GistsListPublicForUserCmd struct {
	internal.BaseCmd
	Username string `required:"" name:"username"`
	Since    string "name:\"since\" help:\"A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.\""
	PerPage  int64  `name:"per_page" help:"Results per page (max 100)"`
	Page     int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListPublicForUserCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/users/:username/gists")
	c.UpdateURLPath("username", c.Username)
	c.UpdateURLQuery("since", c.Since)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type GistsListCmd struct {
	internal.BaseCmd
	Since   string "name:\"since\" help:\"A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.\""
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists")
	c.UpdateURLQuery("since", c.Since)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type GistsListPublicCmd struct {
	internal.BaseCmd
	Since   string "name:\"since\" help:\"A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.\""
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListPublicCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/public")
	c.UpdateURLQuery("since", c.Since)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type GistsListStarredCmd struct {
	internal.BaseCmd
	Since   string "name:\"since\" help:\"A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.\""
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListStarredCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/starred")
	c.UpdateURLQuery("since", c.Since)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type GistsGetCmd struct {
	internal.BaseCmd
	GistId string `required:"" name:"gist_id"`
}

func (c *GistsGetCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id")
	c.UpdateURLPath("gist_id", c.GistId)
	return c.DoRequest("GET")
}

type GistsGetRevisionCmd struct {
	internal.BaseCmd
	GistId string `required:"" name:"gist_id"`
	Sha    string `required:"" name:"sha"`
}

func (c *GistsGetRevisionCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id/:sha")
	c.UpdateURLPath("gist_id", c.GistId)
	c.UpdateURLPath("sha", c.Sha)
	return c.DoRequest("GET")
}

type GistsListCommitsCmd struct {
	internal.BaseCmd
	GistId  string `required:"" name:"gist_id"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListCommitsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id/commits")
	c.UpdateURLPath("gist_id", c.GistId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type GistsStarCmd struct {
	internal.BaseCmd
	GistId string `required:"" name:"gist_id"`
}

func (c *GistsStarCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id/star")
	c.UpdateURLPath("gist_id", c.GistId)
	return c.DoRequest("PUT")
}

type GistsUnstarCmd struct {
	internal.BaseCmd
	GistId string `required:"" name:"gist_id"`
}

func (c *GistsUnstarCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id/star")
	c.UpdateURLPath("gist_id", c.GistId)
	return c.DoRequest("DELETE")
}

type GistsCheckIsStarredCmd struct {
	internal.BaseCmd
	GistId string `required:"" name:"gist_id"`
}

func (c *GistsCheckIsStarredCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id/star")
	c.UpdateURLPath("gist_id", c.GistId)
	return c.DoRequest("GET")
}

type GistsForkCmd struct {
	internal.BaseCmd
	GistId string `required:"" name:"gist_id"`
}

func (c *GistsForkCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id/forks")
	c.UpdateURLPath("gist_id", c.GistId)
	return c.DoRequest("POST")
}

type GistsListForksCmd struct {
	internal.BaseCmd
	GistId  string `required:"" name:"gist_id"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListForksCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id/forks")
	c.UpdateURLPath("gist_id", c.GistId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type GistsDeleteCmd struct {
	internal.BaseCmd
	GistId string `required:"" name:"gist_id"`
}

func (c *GistsDeleteCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id")
	c.UpdateURLPath("gist_id", c.GistId)
	return c.DoRequest("DELETE")
}

type GistsListCommentsCmd struct {
	internal.BaseCmd
	GistId  string `required:"" name:"gist_id"`
	PerPage int64  `name:"per_page" help:"Results per page (max 100)"`
	Page    int64  `name:"page" help:"Page number of the results to fetch."`
}

func (c *GistsListCommentsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id/comments")
	c.UpdateURLPath("gist_id", c.GistId)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLQuery("page", c.Page)
	return c.DoRequest("GET")
}

type GistsGetCommentCmd struct {
	internal.BaseCmd
	GistId    string `required:"" name:"gist_id"`
	CommentId int64  `required:"" name:"comment_id"`
}

func (c *GistsGetCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id/comments/:comment_id")
	c.UpdateURLPath("gist_id", c.GistId)
	c.UpdateURLPath("comment_id", c.CommentId)
	return c.DoRequest("GET")
}

type GistsCreateCommentCmd struct {
	internal.BaseCmd
	GistId string `required:"" name:"gist_id"`
	Body   string `required:"" name:"body" help:"The comment text."`
}

func (c *GistsCreateCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id/comments")
	c.UpdateURLPath("gist_id", c.GistId)
	c.UpdateBody("body", c.Body)
	return c.DoRequest("POST")
}

type GistsEditCommentCmd struct {
	internal.BaseCmd
	GistId    string `required:"" name:"gist_id"`
	CommentId int64  `required:"" name:"comment_id"`
	Body      string `required:"" name:"body" help:"The comment text."`
}

func (c *GistsEditCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id/comments/:comment_id")
	c.UpdateURLPath("gist_id", c.GistId)
	c.UpdateURLPath("comment_id", c.CommentId)
	c.UpdateBody("body", c.Body)
	return c.DoRequest("PATCH")
}

type GistsDeleteCommentCmd struct {
	internal.BaseCmd
	GistId    string `required:"" name:"gist_id"`
	CommentId int64  `required:"" name:"comment_id"`
}

func (c *GistsDeleteCommentCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/gists/:gist_id/comments/:comment_id")
	c.UpdateURLPath("gist_id", c.GistId)
	c.UpdateURLPath("comment_id", c.CommentId)
	return c.DoRequest("DELETE")
}
