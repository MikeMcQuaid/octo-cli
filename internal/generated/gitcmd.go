// Code generated by octo-cli/generator; DO NOT EDIT.

package generated

import "github.com/octo-cli/octo-cli/internal"

type GitCmd struct {
	CreateBlob       GitCreateBlobCmd       `cmd:""`
	CreateRef        GitCreateRefCmd        `cmd:""`
	DeleteRef        GitDeleteRefCmd        `cmd:""`
	GetBlob          GitGetBlobCmd          `cmd:""`
	GetCommit        GitGetCommitCmd        `cmd:""`
	GetRef           GitGetRefCmd           `cmd:""`
	GetTag           GitGetTagCmd           `cmd:""`
	GetTree          GitGetTreeCmd          `cmd:""`
	ListMatchingRefs GitListMatchingRefsCmd `cmd:""`
	UpdateRef        GitUpdateRefCmd        `cmd:""`
}

type GitCreateBlobCmd struct {
	Content  string `required:"" name:"content"`
	Encoding string `name:"encoding"`
	Owner    string `name:"owner"`
	Repo     string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *GitCreateBlobCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/git/blobs")
	c.UpdateBody("content", c.Content)
	c.UpdateBody("encoding", c.Encoding)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("POST")
}

type GitCreateRefCmd struct {
	Owner string `name:"owner"`
	Ref   string `required:"" name:"ref"`
	Repo  string `required:"" name:"repo"`
	Sha   string `required:"" name:"sha"`
	internal.BaseCmd
}

func (c *GitCreateRefCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/git/refs")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateBody("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("sha", c.Sha)
	return c.DoRequest("POST")
}

type GitDeleteRefCmd struct {
	Owner string `name:"owner"`
	Ref   string `required:"" name:"ref"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *GitDeleteRefCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/git/refs/:ref")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("DELETE")
}

type GitGetBlobCmd struct {
	FileSha string `required:"" name:"file_sha"`
	Owner   string `name:"owner"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *GitGetBlobCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/git/blobs/:file_sha")
	c.UpdateURLPath("file_sha", c.FileSha)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type GitGetCommitCmd struct {
	CommitSha string `required:"" name:"commit_sha"`
	Owner     string `name:"owner"`
	Repo      string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *GitGetCommitCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/git/commits/:commit_sha")
	c.UpdateURLPath("commit_sha", c.CommitSha)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type GitGetRefCmd struct {
	Owner string `name:"owner"`
	Ref   string `required:"" name:"ref"`
	Repo  string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *GitGetRefCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/git/ref/:ref")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type GitGetTagCmd struct {
	Owner  string `name:"owner"`
	Repo   string `required:"" name:"repo"`
	TagSha string `required:"" name:"tag_sha"`
	internal.BaseCmd
}

func (c *GitGetTagCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/git/tags/:tag_sha")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("tag_sha", c.TagSha)
	return c.DoRequest("GET")
}

type GitGetTreeCmd struct {
	Owner     string `name:"owner"`
	Recursive int64  `name:"recursive"`
	Repo      string `required:"" name:"repo"`
	TreeSha   string `required:"" name:"tree_sha"`
	internal.BaseCmd
}

func (c *GitGetTreeCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/git/trees/:tree_sha")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("recursive", c.Recursive)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateURLPath("tree_sha", c.TreeSha)
	return c.DoRequest("GET")
}

type GitListMatchingRefsCmd struct {
	Owner   string `name:"owner"`
	Page    int64  `name:"page"`
	PerPage int64  `name:"per_page"`
	Ref     string `required:"" name:"ref"`
	Repo    string `required:"" name:"repo"`
	internal.BaseCmd
}

func (c *GitListMatchingRefsCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/git/matching-refs/:ref")
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLQuery("page", c.Page)
	c.UpdateURLQuery("per_page", c.PerPage)
	c.UpdateURLPath("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	return c.DoRequest("GET")
}

type GitUpdateRefCmd struct {
	Force bool   `name:"force"`
	Owner string `name:"owner"`
	Ref   string `required:"" name:"ref"`
	Repo  string `required:"" name:"repo"`
	Sha   string `required:"" name:"sha"`
	internal.BaseCmd
}

func (c *GitUpdateRefCmd) Run(isValueSetMap map[string]bool) error {
	c.SetIsValueSetMap(isValueSetMap)
	c.SetURLPath("/repos/:owner/:repo/git/refs/:ref")
	c.UpdateBody("force", c.Force)
	c.UpdateURLPath("owner", c.Owner)
	c.UpdateURLPath("ref", c.Ref)
	c.UpdateURLPath("repo", c.Repo)
	c.UpdateBody("sha", c.Sha)
	return c.DoRequest("PATCH")
}
